This file is a merged representation of the entire codebase, combined into a single document by Repomix.
The content has been processed where comments have been removed, empty lines have been removed.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Code comments have been removed from supported file types
- Empty lines have been removed from all files
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.gitignore
app/api/auth/[...nextauth]/route.ts
app/api/clear-jwt/route.ts
app/api/me/route.ts
app/api/set-jwt/route.ts
app/api/stats/route.ts
app/api/test-jwt/route.ts
app/api/users/route.ts
app/api/validate-jwt-steam/route.ts
app/globals.css
app/layout.tsx
app/login/layout.tsx
app/login/page.tsx
app/page.tsx
app/settings/layout.tsx
app/settings/page.tsx
app/settings/settings-client.tsx
app/users/page.tsx
auth.ts
components.json
components/charts/best-days.tsx
components/charts/chart-legend-header.tsx
components/charts/chart-provider.tsx
components/charts/stats-chart-area-interactive.tsx
components/charts/stats-chart-bars.tsx
components/charts/stats-chart-line-multiple.tsx
components/day-selector.tsx
components/header/header-client.tsx
components/header/header-navigation.tsx
components/header/header.tsx
components/icons.tsx
components/jwt-guard.tsx
components/jwt-setup-modal.tsx
components/jwt-status-provider.tsx
components/logo-spinner.tsx
components/session-provider.tsx
components/summary.tsx
components/theme/theme-provider.tsx
components/theme/theme-toggle.tsx
components/ui/alert-dialog.tsx
components/ui/alert.tsx
components/ui/badge.tsx
components/ui/button.tsx
components/ui/card.tsx
components/ui/chart.tsx
components/ui/context-menu.tsx
components/ui/dialog.tsx
components/ui/dropdown-menu.tsx
components/ui/input.tsx
components/ui/label.tsx
components/ui/pagination.tsx
components/ui/select.tsx
components/ui/separator.tsx
components/ui/sonner.tsx
components/ui/table.tsx
components/ui/tooltip.tsx
components/user/user-menu.tsx
contexts/user-context.tsx
lib/auth-wrapper.ts
lib/utils.ts
LICENSE
middleware.ts
next.config.ts
package.json
postcss.config.mjs
README.md
tailwind.config.js
tsconfig.json
types/next-auth.d.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="app/api/validate-jwt-steam/route.ts">
import { NextRequest, NextResponse } from "next/server"
import { getServerSession } from "next-auth"
import { authOptions } from "@/auth"
export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions(request))
    if (!session?.user?.steam) {
      return NextResponse.json({
        success: false,
        message: "Steam session not found"
      }, { status: 401 })
    }
    const jwt = request.cookies.get("jwt")
    if (!jwt) {
      return NextResponse.json({
        success: false,
        message: "JWT not found"
      }, { status: 401 })
    }
    const response = await fetch("https://grust.co/api/users/me", {
      headers: {
        "Cookie": `jwt=${jwt.value}`,
        'Content-Type': 'application/json'
      },
    })
    if (!response.ok) {
      return NextResponse.json({
        success: false,
        message: `gRust API error: ${response.status}`
      }, { status: response.status })
    }
    const grustData = await response.json()
    if (!grustData.success || !grustData.data) {
      return NextResponse.json({
        success: false,
        message: "Invalid response from gRust API"
      }, { status: 400 })
    }
    const grustUid = grustData.data.uid
    const steamId64 = (session.user.steam as any)?.steamid
    if (!steamId64) {
      return NextResponse.json({
        success: false,
        message: "Failed to get Steam ID"
      }, { status: 400 })
    }
    if (grustUid !== steamId64) {
      return NextResponse.json({
        success: false,
        message: "JWT token does not match your Steam account. Make sure you are using a token from the same account you used to log in to the panel."
      }, { status: 403 })
    }
    const userPower = grustData.data.power || 0
    if (userPower < 5) {
      return NextResponse.json({
        success: false,
        message: "Access denied. Administrator privileges required."
      }, { status: 403 })
    }
    return NextResponse.json({
      success: true,
      message: "JWT token is valid and matches your Steam account",
      user: grustData.data
    })
  } catch (error) {
    console.error('JWT validation error:', error)
    return NextResponse.json({
      success: false,
      message: "Error validating JWT token"
    }, { status: 500 })
  }
}
</file>

<file path="components/jwt-guard.tsx">
"use client"
import { usePathname } from 'next/navigation'
import { useSession } from 'next-auth/react'
import { useJwtStatus } from './jwt-status-provider'
import { JwtSetupModal } from './jwt-setup-modal'
export function JwtGuard({ children }: { children: React.ReactNode }) {
  const pathname = usePathname()
  const { data: session, status } = useSession()
  const { isJwtValid, isLoading, checkJwtStatus } = useJwtStatus()
  const isLoginPage = pathname.startsWith('/login')
  if (isLoginPage) {
    return <>{children}</>
  }
  if (status === 'loading' || isLoading) {
    return (
      <div className="fixed inset-0 bg-background flex items-center justify-center">
        <div className="flex items-center gap-2">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
          <span className="text-lg">Loading...</span>
        </div>
      </div>
    )
  }
  if (!session) {
    return <>{children}</>
  }
  const shouldShowJwtModal = session && !isJwtValid
  return (
    <>
      <JwtSetupModal
        isOpen={shouldShowJwtModal}
        onValidToken={checkJwtStatus}
      />
      {shouldShowJwtModal ? null : children}
    </>
  )
}
</file>

<file path="components/jwt-setup-modal.tsx">
"use client"
import { useState, useEffect } from 'react'
import { useSession } from 'next-auth/react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Separator } from '@/components/ui/separator'
import { toast } from 'sonner'
import { Icons } from '@/components/icons'
import { AlertTriangle, CheckCircle, Info, ExternalLink } from 'lucide-react'
interface JwtSetupModalProps {
  isOpen: boolean
  onValidToken: () => void
}
export function JwtSetupModal({ isOpen, onValidToken }: JwtSetupModalProps) {
  const { data: session } = useSession()
  const [jwt, setJwt] = useState('')
  const [isJwtVisible, setIsJwtVisible] = useState(false)
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [isValidating, setIsValidating] = useState(false)
  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = 'hidden'
    } else {
      document.body.style.overflow = 'unset'
    }
    return () => {
      document.body.style.overflow = 'unset'
    }
  }, [isOpen])
  const handleSaveAndValidate = async () => {
    if (!jwt.trim()) {
      setError('Please enter a JWT token')
      return
    }
    if (!session?.user?.steam) {
      setError('Failed to get Steam data. Please try logging in again.')
      return
    }
    setIsLoading(true)
    setError(null)
    try {
      const saveResponse = await fetch('/api/set-jwt', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ jwt: jwt.trim() }),
      })
      if (!saveResponse.ok) {
        throw new Error('Failed to save JWT token')
      }
      setIsValidating(true)
      const validateResponse = await fetch('/api/validate-jwt-steam', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      })
      const validateData = await validateResponse.json()
      if (validateResponse.ok && validateData.success) {
        toast.success('JWT token successfully installed and verified!')
        onValidToken()
      } else {
        let errorMessage = validateData.message || 'JWT token is invalid or does not match your Steam account'
        if (validateData.message?.includes('Administrator privileges required')) {
          errorMessage = 'Access denied: You need administrator privileges (power level 5+) to use this panel.'
        }
        setError(errorMessage)
        await fetch('/api/clear-jwt', { method: 'POST' })
      }
    } catch (error: any) {
      setError(error.message || 'An error occurred while saving the token')
      await fetch('/api/clear-jwt', { method: 'POST' })
    } finally {
      setIsLoading(false)
      setIsValidating(false)
    }
  }
  if (!isOpen) return null
  return (
    <div className="fixed inset-0 z-[100] bg-background/95 backdrop-blur-sm">
      <div className="fixed inset-0 overflow-y-auto">
        <div className="flex min-h-full items-center justify-center p-4">
          <div className="w-full max-w-6xl grid grid-cols-1 lg:grid-cols-2 gap-6">
            {}
            <Card className="border-2 border-destructive/50">
              <CardHeader>
                <div className="flex items-center gap-2">
                  <AlertTriangle className="h-6 w-6 text-destructive" />
                  <CardTitle className="text-xl text-destructive">
                    JWT Setup Required
                  </CardTitle>
                </div>
                <CardDescription>
                  To access the panel, you need to configure the JWT token from gRust
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {error && (
                  <Alert variant="destructive">
                    <AlertTriangle className="h-4 w-4" />
                    <AlertDescription>{error}</AlertDescription>
                  </Alert>
                )}
                <div className="space-y-2">
                  <Label htmlFor="jwt">JWT Token</Label>
                  <div className="relative">
                    <Input
                      id="jwt"
                      placeholder="Paste your JWT token here..."
                      value={jwt}
                      onChange={(e) => setJwt(e.target.value)}
                      type={isJwtVisible ? 'text' : 'password'}
                      className="pr-10"
                      disabled={isLoading}
                    />
                    <Button
                      type="button"
                      variant="ghost"
                      size="icon"
                      className="absolute right-2 top-1/2 -translate-y-1/2 h-7 w-7"
                      onClick={() => setIsJwtVisible(!isJwtVisible)}
                      disabled={isLoading}
                    >
                      {isJwtVisible ? (
                        <Icons.eyeOff className="h-4 w-4" />
                      ) : (
                        <Icons.eye className="h-4 w-4" />
                      )}
                    </Button>
                  </div>
                </div>
                <Button
                  onClick={handleSaveAndValidate}
                  disabled={isLoading || !jwt.trim()}
                  className="w-full"
                >
                  {isLoading ? (
                    <>
                      <Icons.spinner className="mr-2 h-4 w-4 animate-spin" />
                      {isValidating ? 'Validating token...' : 'Saving...'}
                    </>
                  ) : (
                    <>
                      <CheckCircle className="mr-2 h-4 w-4" />
                      Save and validate
                    </>
                  )}
                </Button>
                {session?.user && (
                  <div className="mt-4 p-3 bg-muted rounded-md">
                    <p className="text-sm text-muted-foreground">
                      Steam account: <span className="font-medium">{session.user.name}</span>
                    </p>
                  </div>
                )}
              </CardContent>
            </Card>
            {}
            <Card>
              <CardHeader>
                <div className="flex items-center gap-2">
                  <Info className="h-5 w-5 text-blue-500" />
                  <CardTitle>How to get a JWT token</CardTitle>
                </div>
                <CardDescription>
                  Follow these steps to get your JWT token
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-3">
                  <div className="flex gap-3">
                    <div className="flex-shrink-0 w-6 h-6 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-sm font-medium">
                      1
                    </div>
                    <div>
                      <p className="font-medium">Login to the gRust website</p>
                      <p className="text-sm text-muted-foreground">
                        Go to grust.co and login via Steam
                      </p>
                      <Button variant="outline" size="sm" className="mt-2" asChild>
                        <a href="https://grust.co" target="_blank" rel="noopener noreferrer">
                          <ExternalLink className="mr-2 h-4 w-4" />
                          Open gRust
                        </a>
                      </Button>
                    </div>
                  </div>
                  <Separator />
                  <div className="flex gap-3">
                    <div className="flex-shrink-0 w-6 h-6 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-sm font-medium">
                      2
                    </div>
                    <div>
                      <p className="font-medium">Open developer tools</p>
                      <p className="text-sm text-muted-foreground">
                        Press F12 or Ctrl+Shift+I (Cmd+Option+I on Mac)
                      </p>
                    </div>
                  </div>
                  <Separator />
                  <div className="flex gap-3">
                    <div className="flex-shrink-0 w-6 h-6 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-sm font-medium">
                      3
                    </div>
                    <div>
                      <p className="font-medium">Go to the Storage tab</p>
                      <p className="text-sm text-muted-foreground">
                        In the developer tools, find the "Storage" tab or "Application" for chromium users
                      </p>
                    </div>
                  </div>
                  <Separator />
                  <div className="flex gap-3">
                    <div className="flex-shrink-0 w-6 h-6 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-sm font-medium">
                      4
                    </div>
                    <div>
                      <p className="font-medium">Find the Cookies section</p>
                      <p className="text-sm text-muted-foreground">
                        Open it and find <code className="bg-muted px-1 rounded">https:
                      </p>
                    </div>
                  </div>
                  <Separator />
                  <div className="flex gap-3">
                    <div className="flex-shrink-0 w-6 h-6 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-sm font-medium">
                      5
                    </div>
                    <div>
                      <p className="font-medium">Copy the JWT from the Cookie</p>
                      <p className="text-sm text-muted-foreground">
                        Find a cookie with the <code className="bg-muted px-1 rounded">jwt</code> name and copy its value
                      </p>
                    </div>
                  </div>
                </div>
                <Alert>
                  <Info className="h-4 w-4" />
                  <AlertDescription>
                    <strong>Important:</strong> The JWT token must belong to the same Steam account
                    you used to log in to this panel. You also need to be staff on gRust (obviously).
                  </AlertDescription>
                </Alert>
                <Alert variant="destructive">
                  <AlertTriangle className="h-4 w-4" />
                  <AlertDescription>
                    <strong>Security:</strong> Do not share your JWT token with anyone.
                    It provides full access to your gRust account.
                  </AlertDescription>
                </Alert>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="components/jwt-status-provider.tsx">
"use client"
import { createContext, useContext, useEffect, useState } from 'react'
import { useSession } from 'next-auth/react'
interface JwtStatusContextType {
  isJwtValid: boolean
  isLoading: boolean
  checkJwtStatus: () => Promise<void>
}
const JwtStatusContext = createContext<JwtStatusContextType>({
  isJwtValid: false,
  isLoading: true,
  checkJwtStatus: async () => {}
})
export const JwtStatusProvider = ({ children }: { children: React.ReactNode }) => {
  const { data: session, status } = useSession()
  const [isJwtValid, setIsJwtValid] = useState(false)
  const [isLoading, setIsLoading] = useState(true)
  const checkJwtStatus = async () => {
    if (status === 'loading') return
    if (!session) {
      setIsJwtValid(false)
      setIsLoading(false)
      return
    }
    try {
      setIsLoading(true)
      const testResponse = await fetch('/api/test-jwt')
      if (!testResponse.ok) {
        setIsJwtValid(false)
        return
      }
      const validateResponse = await fetch('/api/validate-jwt-steam', {
        method: 'POST'
      })
      const validateData = await validateResponse.json()
      setIsJwtValid(validateResponse.ok && validateData.success)
    } catch (error) {
      console.error('JWT check failed:', error)
      setIsJwtValid(false)
    } finally {
      setIsLoading(false)
    }
  }
  useEffect(() => {
    checkJwtStatus()
  }, [session, status])
  return (
    <JwtStatusContext.Provider value={{ isJwtValid, isLoading, checkJwtStatus }}>
      {children}
    </JwtStatusContext.Provider>
  )
}
export const useJwtStatus = () => {
  const context = useContext(JwtStatusContext)
  if (!context) {
    throw new Error('useJwtStatus must be used within a JwtStatusProvider')
  }
  return context
}
</file>

<file path="components/ui/alert.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"
const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current",
  {
    variants: {
      variant: {
        default: "bg-card text-card-foreground",
        destructive:
          "text-destructive bg-card [&>svg]:text-current *:data-[slot=alert-description]:text-destructive/90",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)
function Alert({
  className,
  variant,
  ...props
}: React.ComponentProps<"div"> & VariantProps<typeof alertVariants>) {
  return (
    <div
      data-slot="alert"
      role="alert"
      className={cn(alertVariants({ variant }), className)}
      {...props}
    />
  )
}
function AlertTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-title"
      className={cn(
        "col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight",
        className
      )}
      {...props}
    />
  )
}
function AlertDescription({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-description"
      className={cn(
        "text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed",
        className
      )}
      {...props}
    />
  )
}
export { Alert, AlertTitle, AlertDescription }
</file>

<file path="app/api/clear-jwt/route.ts">
import { NextResponse } from "next/server";
export async function POST() {
  const response = NextResponse.json({ success: true });
  response.cookies.delete("jwt");
  return response;
}
</file>

<file path="app/api/me/route.ts">
import { NextRequest, NextResponse } from "next/server";
export async function GET(request: NextRequest) {
  const jwt = request.cookies.get("jwt");
  if (!jwt) {
    return NextResponse.json({
      success: false,
      message: "JWT not found"
    }, { status: 401 });
  }
  try {
    const response = await fetch("https://grust.co/api/users/me", {
      headers: {
        "Cookie": `jwt=${jwt.value}`,
        'Content-Type': 'application/json'
      },
    });
    if (!response.ok) {
      return NextResponse.json({
        success: false,
        message: `API request failed with status ${response.status}`
      }, { status: response.status });
    }
    const data = await response.json();
    if (data.success) {
      return NextResponse.json({
        success: true,
        data: data.data
      });
    } else {
      return NextResponse.json({
        success: false,
        message: "Failed to get user info",
        error: data.error
      }, { status: 400 });
    }
  } catch (error) {
    return NextResponse.json({
      success: false,
      message: "Network error",
      error: String(error)
    }, { status: 500 });
  }
}
</file>

<file path="app/login/layout.tsx">
export default function LoginLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <div className="min-h-screen bg-background">
      {children}
    </div>
  )
}
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="components/charts/best-days.tsx">
"use client"
import { useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Tooltip, TooltipContent, TooltipTrigger } from '@/components/ui/tooltip'
import { useChart } from './chart-provider'
import { Button } from '@/components/ui/button'
import Link from 'next/link'
export function BestDaysCard() {
  const { stats, loading, error, fetchStats, days } = useChart()
  const formatDate = (dateString: string) => {
    const date = new Date(dateString)
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    })
  }
  const getBestDaysToShow = () => {
    if (!stats?.best_days) return []
    return stats.best_days.slice(0, 6)
  }
  if (loading) {
    return (
      <Card className="w-full h-full">
        <CardHeader>
          <CardTitle className="text-lg md:text-xl">Best Days</CardTitle>
        </CardHeader>
        <CardContent className="space-y-3">
          {[...Array(6)].map((_, index) => (
            <div key={index} className="p-3 md:p-4 bg-muted/30 border rounded-lg">
              <div className="flex items-center justify-between mb-2">
                <div className="h-4 md:h-5 bg-muted animate-pulse rounded w-32 md:w-40" />
                <div className="h-4 md:h-5 bg-muted animate-pulse rounded w-24 md:w-32" />
              </div>
              <div className="h-3 md:h-4 bg-muted animate-pulse rounded w-20 md:w-24" />
            </div>
          ))}
        </CardContent>
      </Card>
    )
  }
  if (error) {
    return (
      <Card className="w-full h-full">
        <CardHeader>
          <CardTitle className="text-lg md:text-xl">Best Days</CardTitle>
        </CardHeader>
        <CardContent className="flex flex-col items-center justify-center min-h-[200px] gap-4">
          <p className="text-red-500 text-center text-sm">{error}</p>
          {error.includes('JWT not found') && (
            <div className="text-center">
              <p className="text-xs text-muted-foreground mb-2">
                You need to configure your JWT token
              </p>
              <Button asChild size="sm">
                <Link href="/settings">Go to Settings</Link>
              </Button>
            </div>
          )}
          <Button onClick={() => fetchStats(days)} variant="outline" size="sm">
            Retry
          </Button>
        </CardContent>
      </Card>
    )
  }
  const bestDaysToShow = getBestDaysToShow()
  if (!bestDaysToShow.length) {
    return (
      <Card className="w-full h-full">
        <CardHeader>
          <CardTitle className="text-lg md:text-xl">Best Days</CardTitle>
        </CardHeader>
        <CardContent className="py-8">
          <p className="text-muted-foreground text-center text-sm">
            No best days data available
          </p>
        </CardContent>
      </Card>
    )
  }
  return (
    <Card className="w-full h-full">
      <CardHeader>
        <CardTitle className="text-lg md:text-xl">Best Days</CardTitle>
      </CardHeader>
      <CardContent className="space-y-2 md:space-y-3">
        {bestDaysToShow.map((bestDay) => (
          <Tooltip key={bestDay.date}>
            <TooltipTrigger asChild>
              <div className="p-3 md:p-4 bg-card border rounded-lg hover:bg-muted/30 transition-colors">
                <div className="flex items-center justify-between mb-2">
                  <div className="text-xs md:text-sm font-medium">
                    {formatDate(bestDay.date)}
                  </div>
                  <div className="text-xs md:text-sm font-bold text-green-500">
                    +{bestDay.data.new_players.toLocaleString()} players
                  </div>
                </div>
                <div className="text-xs text-muted-foreground">
                  Bans: {bestDay.data.bans}, Unbans: {bestDay.data.unbans}
                </div>
              </div>
            </TooltipTrigger>
            <TooltipContent className="max-w-xs bg-muted text-muted-foreground border-border drop-shadow-xl">
              <div className="space-y-2">
                <div className="font-medium text-center text-foreground">
                  Extended Data
                </div>
                <div className="space-y-1 text-sm">
                  <div className="flex justify-between">
                    <span>date:</span>
                    <span className="font-mono">"{bestDay.date}"</span>
                  </div>
                  <div className="flex justify-between">
                    <span>new_players:</span>
                    <span className="font-mono">{bestDay.data.new_players}</span>
                  </div>
                  <div className="flex justify-between">
                    <span>bans:</span>
                    <span className="font-mono">{bestDay.data.bans}</span>
                  </div>
                  <div className="flex justify-between">
                    <span>unbans:</span>
                    <span className="font-mono">{bestDay.data.unbans}</span>
                  </div>
                </div>
              </div>
            </TooltipContent>
          </Tooltip>
        ))}
      </CardContent>
    </Card>
  )
}
</file>

<file path="components/charts/chart-legend-header.tsx">
"use client";
import { type ChartConfig } from '@/components/ui/chart';
interface ChartLegendHeaderProps {
  chartConfig: ChartConfig;
}
export function ChartLegendHeader({ chartConfig }: ChartLegendHeaderProps) {
  if (!chartConfig) {
    return null;
  }
  return (
    <div className="flex items-center gap-4">
      {Object.entries(chartConfig).map(([key, config]) => {
        const color = config.color;
        return (
          <div key={key} className="flex items-center gap-1.5">
            {color && (
              <div
                className="h-2 w-2 shrink-0 rounded-[2px]"
                style={{ backgroundColor: color }}
              />
            )}
            <span className="text-sm text-muted-foreground">{config.label}</span>
          </div>
        );
      })}
    </div>
  );
}
</file>

<file path="components/charts/chart-provider.tsx">
"use client"
import { createContext, useContext, useEffect, useState, useCallback } from 'react'
export type ChartType = 'bar' | 'area' | 'line'
export type BestDay = {
  data: {
    bans: number
    new_players: number
    unbans: number
  }
  date: string
}
export type Stats = {
  today: {
    bans: number
    new_players: number
    unbans: number
  }
  yesterday: {
    bans: number
    new_players: number
    unbans: number
  }
  week_data: {
    name: string
    bans: number
    new_players: number
    unbans: number
    date?: string | null
  }[]
  best_days: BestDay[]
  total_players: number
  total_bans: number
  new_players: number
}
interface ChartContextType {
  chartType: ChartType
  setChartType: (type: ChartType) => void
  stats: Stats | null
  data: Stats['week_data']
  loading: boolean
  error: string | null
  fetchStats: (days?: number) => Promise<void>
  days: number
  setDays: (days: number) => void
}
const ChartContext = createContext<ChartContextType | undefined>(undefined)
export const ChartProvider = ({ children }: { children: React.ReactNode }) => {
  const [chartType, setChartTypeState] = useState<ChartType>('bar');
  const [stats, setStats] = useState<Stats | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [days, setDays] = useState(7);
  useEffect(() => {
    const savedChartType = localStorage.getItem('chartType') as ChartType;
    if (savedChartType) {
      setChartTypeState(savedChartType);
    }
  }, []);
  const setChartType = (type: ChartType) => {
    setChartTypeState(type);
    localStorage.setItem('chartType', type);
  };
  const fetchStats = useCallback(async (selectedDays?: number) => {
    try {
      setLoading(true);
      setError(null);
      const daysParam = selectedDays || days;
      const response = await fetch(`/api/stats?days=${daysParam}`);
      if (!response.ok) {
        if (response.status === 401) {
          throw new Error('JWT not found. Please configure your JWT token in settings.');
        }
        const errorData = await response.json();
        throw new Error(errorData.error || `HTTP ${response.status}`);
      }
      const data = await response.json();
      if (data.error) {
        throw new Error(data.error);
      }
      setStats(data);
    } catch (err: any) {
      setError(err.message || 'Failed to fetch stats');
      console.error('Chart Provider Error:', err);
    } finally {
      setLoading(false);
    }
  }, [days]);
  useEffect(() => {
    fetchStats(days);
  }, [fetchStats, days]);
  const contextValue: ChartContextType = {
    chartType,
    setChartType,
    stats,
    data: stats?.week_data || [],
    loading,
    error,
    fetchStats,
    days,
    setDays,
  };
  return (
    <ChartContext.Provider value={contextValue}>
      {children}
    </ChartContext.Provider>
  )
}
export const useChart = () => {
  const context = useContext(ChartContext)
  if (context === undefined) {
    throw new Error('useChart must be used within a ChartProvider')
  }
  return context
}
</file>

<file path="components/charts/stats-chart-area-interactive.tsx">
"use client";
import * as React from 'react';
import { Area, AreaChart, CartesianGrid, XAxis } from 'recharts';
import {
  ChartConfig,
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
} from '@/components/ui/chart';
import { useChart } from './chart-provider';
const chartConfig = {
  new_players: {
    label: 'New Players',
    color: 'var(--chart-1)',
  },
  bans: {
    label: 'Bans',
    color: 'var(--chart-2)',
  },
  unbans: {
    label: 'Unbans',
    color: 'var(--chart-3)',
  },
} satisfies ChartConfig;
export function ChartAreaInteractive() {
  const { data } = useChart();
  return (
    <ChartContainer
      config={chartConfig}
      className="h-full w-full"
    >
      <AreaChart data={data} margin={{
        top: 5,
        right: 30,
        left: 30,
        bottom: 5,
      }}>
        <defs>
          <linearGradient id="fillNewPlayers" x1="0" y1="0" x2="0" y2="1">
            <stop
              offset="5%"
              stopColor="var(--chart-1)"
              stopOpacity={0.8}
            />
            <stop
              offset="95%"
              stopColor="var(--chart-1)"
              stopOpacity={0.1}
            />
          </linearGradient>
          <linearGradient id="fillBans" x1="0" y1="0" x2="0" y2="1">
            <stop
              offset="5%"
              stopColor="var(--chart-2)"
              stopOpacity={0.8}
            />
            <stop
              offset="95%"
              stopColor="var(--chart-2)"
              stopOpacity={0.1}
            />
          </linearGradient>
          <linearGradient id="fillUnbans" x1="0" y1="0" x2="0" y2="1">
            <stop
              offset="5%"
              stopColor="var(--chart-3)"
              stopOpacity={0.8}
            />
            <stop
              offset="95%"
              stopColor="var(--chart-3)"
              stopOpacity={0.1}
            />
          </linearGradient>
        </defs>
        <CartesianGrid vertical={false} />
        <XAxis
          dataKey="name"
          tickLine={false}
          axisLine={false}
          tickMargin={8}
          interval={0}
        />
        <ChartTooltip
          cursor={false}
          content={
            <ChartTooltipContent
              labelFormatter={(value) => value}
              formatter={(value, name) => (
                <div className="flex items-center justify-between w-full min-w-[120px]">
                  <div className="flex items-center gap-2">
                    <div
                      className="h-3 w-3 rounded-full"
                      style={{
                        backgroundColor: chartConfig[name as keyof typeof chartConfig]?.color,
                      }}
                    />
                    <span className="text-muted-foreground">
                      {chartConfig[name as keyof typeof chartConfig]?.label}:
                    </span>
                  </div>
                  <span className="font-medium">{value}</span>
                </div>
              )}
              indicator="dot"
            />
          }
        />
        <Area
          dataKey="new_players"
          type="natural"
          fill="url(#fillNewPlayers)"
          stroke="var(--chart-1)"
          stackId="a"
        />
        <Area
          dataKey="bans"
          type="natural"
          fill="url(#fillBans)"
          stroke="var(--chart-2)"
          stackId="a"
        />
        <Area
          dataKey="unbans"
          type="natural"
          fill="url(#fillUnbans)"
          stroke="var(--chart-3)"
          stackId="a"
        />
      </AreaChart>
    </ChartContainer>
  );
}
</file>

<file path="components/charts/stats-chart-bars.tsx">
"use client";
import { useEffect } from 'react';
import { Bar, BarChart, XAxis, YAxis } from 'recharts';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { ChartContainer, ChartTooltip, ChartTooltipContent, type ChartConfig } from '@/components/ui/chart';
import { Button } from '@/components/ui/button';
import Link from 'next/link';
import { useChart } from './chart-provider';
import { ChartAreaInteractive } from './stats-chart-area-interactive';
import { ChartLineMultiple } from './stats-chart-line-multiple';
import { DaySelector } from '../day-selector';
import { ChartLegendHeader } from './chart-legend-header';
const chartConfig = {
  new_players: {
    label: 'New Players',
    color: 'var(--chart-1)',
  },
  bans: {
    label: 'Bans',
    color: 'var(--chart-2)',
  },
  unbans: {
    label: 'Unbans',
    color: 'var(--chart-3)',
  },
} satisfies ChartConfig;
export function StatsChart() {
  const { chartType, data, loading, error, fetchStats, days } = useChart();
  const renderChart = () => {
    switch (chartType) {
      case 'area':
        return <ChartAreaInteractive />;
      case 'line':
        return <ChartLineMultiple />;
      case 'bar':
      default:
        return (
          <ChartContainer config={chartConfig} className="h-full w-full">
            <BarChart data={data} margin={{ top: 0, right: 50, bottom: 0, left: 0 }}>
              <XAxis dataKey="name" />
              <YAxis />
              <ChartTooltip
                content={
                  <ChartTooltipContent
                    labelFormatter={(value) => value}
                    formatter={(value, name) => (
                      <div className="flex items-center justify-between w-full min-w-[120px]">
                        <div className="flex items-center gap-2">
                          <div
                            className="h-3 w-3 rounded-full"
                            style={{
                              backgroundColor: chartConfig[name as keyof typeof chartConfig]?.color,
                            }}
                          />
                          <span className="text-muted-foreground">
                            {chartConfig[name as keyof typeof chartConfig]?.label}:
                          </span>
                        </div>
                        <span className="font-medium">{value}</span>
                      </div>
                    )}
                  />
                }
              />
              <Bar dataKey="new_players" fill="var(--chart-1)" radius={4} />
              <Bar dataKey="bans" fill="var(--chart-2)" radius={4} />
              <Bar dataKey="unbans" fill="var(--chart-3)" radius={4} />
            </BarChart>
          </ChartContainer>
        );
    }
  };
  return (
    <Card className="h-full">
      <CardHeader>
        <div className="flex flex-row items-center justify-between">
            <CardTitle>Week Stats</CardTitle>
            <DaySelector />
        </div>
        <div className="mt-4">
            <ChartLegendHeader chartConfig={chartConfig} />
        </div>
      </CardHeader>
      <CardContent className="px-0 flex-1 flex flex-col">
        {loading ? (
          <div className="flex items-center justify-center flex-1">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
          </div>
        ) : error ? (
          <div className="flex flex-col items-center justify-center flex-1 gap-4">
            <p className="text-red-500 text-center">{error}</p>
            {error.includes('JWT not found') && (
              <div className="text-center">
                <p className="text-sm text-muted-foreground mb-2">
                  You need to configure your JWT token first
                </p>
                <Button asChild>
                  <Link href="/settings">Go to Settings</Link>
                </Button>
              </div>
            )}
            <Button onClick={() => fetchStats(days)} variant="outline">
              Retry
            </Button>
          </div>
        ) : (
          <div className="h-full">{renderChart()}</div>
        )}
      </CardContent>
    </Card>
  );
}
</file>

<file path="components/charts/stats-chart-line-multiple.tsx">
"use client";
import { CartesianGrid, Line, LineChart, XAxis } from 'recharts';
import {
  ChartConfig,
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
} from '@/components/ui/chart';
import { useChart } from './chart-provider';
const chartConfig = {
  new_players: {
    label: 'New Players',
    color: 'var(--chart-1)',
  },
  bans: {
    label: 'Bans',
    color: 'var(--chart-2)',
  },
  unbans: {
    label: 'Unbans',
    color: 'var(--chart-3)',
  },
} satisfies ChartConfig;
export function ChartLineMultiple() {
  const { data } = useChart();
  return (
    <ChartContainer config={chartConfig} className="h-full w-full">
      <LineChart
        accessibilityLayer
        data={data}
        margin={{
          top: 5,
          right: 30,
          left: 30,
          bottom: 5,
        }}
      >
        <CartesianGrid vertical={false} />
        <XAxis
          dataKey="name"
          tickLine={false}
          axisLine={false}
          tickMargin={8}
          interval={0}
        />
        <ChartTooltip
          cursor={false}
          content={
            <ChartTooltipContent
              labelFormatter={(value) => value}
              formatter={(value, name) => (
                <div className="flex items-center justify-between w-full min-w-[120px]">
                  <div className="flex items-center gap-2">
                    <div
                      className="h-3 w-3 rounded-full"
                      style={{
                        backgroundColor: chartConfig[name as keyof typeof chartConfig]?.color,
                      }}
                    />
                    <span className="text-muted-foreground">
                      {chartConfig[name as keyof typeof chartConfig]?.label}:
                    </span>
                  </div>
                  <span className="font-medium">{value}</span>
                </div>
              )}
            />
          }
        />
        <Line
          dataKey="new_players"
          type="monotone"
          stroke="var(--chart-1)"
          strokeWidth={2}
          dot={false}
        />
        <Line
          dataKey="bans"
          type="monotone"
          stroke="var(--chart-2)"
          strokeWidth={2}
          dot={false}
        />
        <Line
          dataKey="unbans"
          type="monotone"
          stroke="var(--chart-3)"
          strokeWidth={2}
          dot={false}
        />
      </LineChart>
    </ChartContainer>
  );
}
</file>

<file path="components/day-selector.tsx">
"use client"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select'
import { useChart } from './charts/chart-provider'
export function DaySelector() {
  const { days, setDays, fetchStats } = useChart()
  const handleDaysChange = (value: string) => {
    const selectedDays = parseInt(value)
    setDays(selectedDays)
    fetchStats(selectedDays)
  }
  const getDisplayValue = () => {
    switch (days) {
      case 5: return '5 Days'
      case 3: return '3 Days'
      case 7: return '7 Days'
      default: return '7 Days'
    }
  }
  return (
    <Select value={days.toString()} onValueChange={handleDaysChange}>
      <SelectTrigger className="w-[120px]">
        <SelectValue placeholder={getDisplayValue()} />
      </SelectTrigger>
      <SelectContent>
        <SelectItem value="3">3 Days</SelectItem>
        <SelectItem value="5">5 Days</SelectItem>
        <SelectItem value="7">7 Days</SelectItem>
      </SelectContent>
    </Select>
  )
}
</file>

<file path="components/header/header-client.tsx">
"use client";
import { Session } from "next-auth";
import Image from "next/image";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import Link from "next/link";
import { ThemeToggle } from "@/components/theme/theme-toggle";
import { useUser } from '@/contexts/user-context';
export function HeaderClient({ session }: { session: Session | null }) {
  const { userInfo, loading } = useUser();
  const decimalToHex = (decimal: number): string => {
    return `#${decimal.toString(16).padStart(6, '0')}`;
  };
  if (!session) {
    return (
      <Button variant="outline" size="sm" asChild className="text-xs md:text-sm">
        <Link href="/login">Sign In</Link>
      </Button>
    );
  }
  return (
    <div className="flex items-center gap-2 md:gap-3">
      <DropdownMenu>
        <DropdownMenuTrigger>
          {session.user?.image && (
            <Image
              src={session.user.image}
              alt="Profile"
              width={40}
              height={40}
              className="rounded-full cursor-pointer"
              unoptimized
            />
          )}
        </DropdownMenuTrigger>
        <DropdownMenuContent align="end" className="w-56">
          <DropdownMenuLabel className="font-normal">
            <div className="flex flex-col space-y-1">
              <p className="text-sm font-medium leading-none">
                {session.user?.name || 'User'}
              </p>
              {userInfo && (
                <p className="text-xs leading-none text-muted-foreground">
                  {userInfo.rank}
                </p>
              )}
            </div>
          </DropdownMenuLabel>
          <DropdownMenuSeparator />
          <DropdownMenuItem asChild>
            <Link href="/settings" className="cursor-pointer">Settings</Link>
          </DropdownMenuItem>
          <DropdownMenuSeparator />
          <div className="flex items-center justify-between">
              <ThemeToggle />
              <AlertDialog>
                <AlertDialogTrigger asChild>
                  <Button size="sm">Log Out</Button>
                </AlertDialogTrigger>
                <AlertDialogContent>
                  <AlertDialogHeader>
                    <AlertDialogTitle>Are you sure?</AlertDialogTitle>
                    <AlertDialogDescription>
                      This action will sign you out of your account.
                    </AlertDialogDescription>
                  </AlertDialogHeader>
                  <AlertDialogFooter>
                    <AlertDialogCancel>Cancel</AlertDialogCancel>
                    <AlertDialogAction asChild>
                      <Link href="/api/auth/signout">Log Out</Link>
                    </AlertDialogAction>
                  </AlertDialogFooter>
                </AlertDialogContent>
              </AlertDialog>
            </div>
        </DropdownMenuContent>
      </DropdownMenu>
      {userInfo && !loading && (
        <div
          className="px-2 py-1 rounded-md text-xs font-medium border hidden lg:block"
          style={{
            backgroundColor: decimalToHex(userInfo.color) + '20',
            borderColor: decimalToHex(userInfo.color) + '40',
            color: decimalToHex(userInfo.color)
          }}
        >
          {userInfo.name}
        </div>
      )}
    </div>
  );
}
</file>

<file path="components/header/header-navigation.tsx">
"use client";
import { useState, useEffect, useRef } from 'react';
import { usePathname } from 'next/navigation';
import { useSession } from 'next-auth/react';
import { Button } from "@/components/ui/button";
import Link from 'next/link';
import { House, Users, Shield, ShieldCheck, FileText, ClipboardList, Menu, X } from 'lucide-react';
import { cn } from '@/lib/utils';
const navigationItems = [
  { href: '/', icon: House, label: 'Dashboard' },
  { href: '/users', icon: Users, label: 'Users' },
  { href: '/bans', icon: Shield, label: 'Bans' },
  { href: '/unbans', icon: ShieldCheck, label: 'Unbans' },
  { href: '/logs', icon: FileText, label: 'Logs' },
  { href: '/applications', icon: ClipboardList, label: 'Applications' },
];
export function HeaderNavigation() {
  const pathname = usePathname();
  const { data: session } = useSession();
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  const menuRef = useRef<HTMLDivElement>(null);
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {
        setMobileMenuOpen(false);
      }
    };
    if (mobileMenuOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    }
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [mobileMenuOpen]);
  useEffect(() => {
    setMobileMenuOpen(false);
  }, [pathname]);
  return (
    <>
      {}
      <nav className="hidden md:flex items-center gap-2">
        {navigationItems.map(({ href, icon: Icon, label }) => {
          const isActive = pathname === href;
          return (
            <Button
              key={href}
              variant="ghost"
              size="sm"
              asChild
              className={cn(
                isActive && "bg-accent text-accent-foreground"
              )}
            >
              <Link href={href} className="flex items-center gap-2">
                <Icon className="h-4 w-4" />
                {label}
              </Link>
            </Button>
          );
        })}
      </nav>
      {}
      <div className="md:hidden" ref={menuRef}>
        {}
        <div className="absolute left-1/2 top-1/2 transform -translate-x-1/2 -translate-y-1/2">
          <Button
            variant="ghost"
            size="sm"
            className="px-4 py-2 min-w-[48px] h-10"
            onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
          >
            {mobileMenuOpen ? <X className="h-5 w-5" /> : <Menu className="h-5 w-5" />}
          </Button>
        </div>
        {}
        {mobileMenuOpen && session && (
          <div className="absolute left-0 right-0 top-full bg-background border-b shadow-lg z-40 animate-in slide-in-from-top-2 duration-200">
            <div className="container mx-auto p-4">
              <nav className="grid grid-cols-2 gap-2">
                {navigationItems.map(({ href, icon: Icon, label }) => {
                  const isActive = pathname === href;
                  return (
                    <Button
                      key={href}
                      variant="ghost"
                      size="sm"
                      asChild
                      className={cn(
                        "justify-start h-12",
                        isActive && "bg-accent text-accent-foreground"
                      )}
                      onClick={() => setMobileMenuOpen(false)}
                    >
                      <Link href={href} className="flex items-center gap-3">
                        <Icon className="h-4 w-4" />
                        {label}
                      </Link>
                    </Button>
                  );
                })}
              </nav>
            </div>
          </div>
        )}
      </div>
    </>
  );
}
</file>

<file path="components/header/header.tsx">
import { getServerSession } from 'next-auth';
import { authOptions } from "@/auth";
import { HeaderClient } from "@/components/header/header-client";
import { HeaderNavigation } from "@/components/header/header-navigation";
import { LogoSpinner } from "@/components/logo-spinner";
export async function Header() {
  const session = await getServerSession(authOptions());
  return (
    <header className="border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/80 sticky top-0 z-50">
      <div className="flex h-14 md:h-16 items-center justify-between px-4 relative">
        <div className="flex items-center gap-2">
          <LogoSpinner />
        </div>
        {}
        <div className="hidden md:flex justify-center absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2">
          {session && <HeaderNavigation />}
        </div>
        {}
        <div className="md:hidden">
          <HeaderNavigation />
        </div>
        <HeaderClient session={session} />
      </div>
    </header>
  );
}
</file>

<file path="components/logo-spinner.tsx">
"use client";
import { useState } from 'react';
export function LogoSpinner() {
  const [isSpinning, setIsSpinning] = useState(false);
  const handleLogoClick = () => {
    if (!isSpinning) {
      setIsSpinning(true);
      setTimeout(() => setIsSpinning(false), 600);
    }
  };
  return (
    <img
      src="/logo.png"
      alt="gRust Panel"
      width={50}
      height={50}
      className={`cursor-pointer transition-transform duration-600 ease-in-out ${isSpinning ? 'animate-spin-left' : ''}`}
      onClick={handleLogoClick}
    />
  );
}
</file>

<file path="components/session-provider.tsx">
"use client";
import { SessionProvider } from "next-auth/react";
import { ReactNode } from "react";
import type { Session } from "next-auth";
export default function ClientSessionProvider({
  children,
  session
}: {
  children: ReactNode;
  session?: Session | null;
}) {
  return <SessionProvider session={session} refetchInterval={0} refetchOnWindowFocus={false}>{children}</SessionProvider>;
}
</file>

<file path="components/theme/theme-provider.tsx">
"use client"
import * as React from "react"
import { ThemeProvider as NextThemesProvider } from "next-themes"
import { type ThemeProviderProps } from "next-themes"
export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}
</file>

<file path="components/theme/theme-toggle.tsx">
"use client"
import * as React from "react"
import { Moon, Sun } from "lucide-react"
import { useTheme } from "next-themes"
import { Button } from "@/components/ui/button"
export function ThemeToggle() {
  const { theme, setTheme } = useTheme()
  return (
    <Button
      variant="ghost"
      size="icon"
      onClick={() => setTheme(theme === "dark" ? "light" : "dark")}
      aria-label="Toggle theme"
    >
      <Sun className="h-5 w-5 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
      <Moon className="absolute h-5 w-5 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
    </Button>
  )
}
</file>

<file path="components/ui/alert-dialog.tsx">
"use client"
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"
import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button";
const AlertDialog = AlertDialogPrimitive.Root
const AlertDialogTrigger = AlertDialogPrimitive.Trigger
const AlertDialogPortal = AlertDialogPrimitive.Portal
const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName
const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName
const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"
const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"
const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName
const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName
const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName
const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName
export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}
</file>

<file path="components/ui/badge.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"
const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)
function Badge({
  className,
  variant,
  asChild = false,
  ...props
}: React.ComponentProps<"span"> &
  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : "span"
  return (
    <Comp
      data-slot="badge"
      className={cn(badgeVariants({ variant }), className)}
      {...props}
    />
  )
}
export { Badge, badgeVariants }
</file>

<file path="components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"
const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)
function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"
  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}
export { Button, buttonVariants }
</file>

<file path="components/ui/card.tsx">
import * as React from "react"
import { cn } from "@/lib/utils"
function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props}
    />
  )
}
function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className
      )}
      {...props}
    />
  )
}
function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  )
}
function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}
function CardAction({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className
      )}
      {...props}
    />
  )
}
function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  )
}
function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props}
    />
  )
}
export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
}
</file>

<file path="components/ui/chart.tsx">
"use client"
import * as React from "react"
import * as RechartsPrimitive from "recharts"
import { cn } from "@/lib/utils"
const THEMES = { light: "", dark: ".dark" } as const
export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}
type ChartContextProps = {
  config: ChartConfig
}
const ChartContext = React.createContext<ChartContextProps | null>(null)
function useChart() {
  const context = React.useContext(ChartContext)
  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }
  return context
}
function ChartContainer({
  id,
  className,
  children,
  config,
  ...props
}: React.ComponentProps<"div"> & {
  config: ChartConfig
  children: React.ComponentProps<
    typeof RechartsPrimitive.ResponsiveContainer
  >["children"]
}) {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`
  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        className={cn(
          "[&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border flex aspect-video justify-center text-xs [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-hidden [&_.recharts-sector]:outline-hidden [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-surface]:outline-hidden",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
}
const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([, config]) => config.theme || config.color
  )
  if (!colorConfig.length) {
    return null
  }
  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}
const ChartTooltip = RechartsPrimitive.Tooltip
interface ChartTooltipContentProps extends React.ComponentProps<"div"> {
  active?: boolean
  payload?: any[]
  label?: any
  hideLabel?: boolean
  hideIndicator?: boolean
  indicator?: "line" | "dot" | "dashed"
  nameKey?: string
  labelKey?: string
  labelFormatter?: (value: any, payload: any[]) => React.ReactNode
  formatter?: (value: any, name: any, item: any, index: number, payload: any) => React.ReactNode
  color?: string
  labelClassName?: string
}
function ChartTooltipContent({
  active,
  payload,
  className,
  indicator = "dot",
  hideLabel = false,
  hideIndicator = false,
  label,
  labelFormatter,
  labelClassName,
  formatter,
  color,
  nameKey,
  labelKey,
}: ChartTooltipContentProps) {
  const { config } = useChart()
  const tooltipLabel = React.useMemo(() => {
    if (hideLabel || !payload?.length) {
      return null
    }
    const [item] = payload
    const key = `${labelKey || item?.dataKey || item?.name || "value"}`
    const itemConfig = getPayloadConfigFromPayload(config, item, key)
    const value =
      !labelKey && typeof label === "string"
        ? config[label as keyof typeof config]?.label || label
        : itemConfig?.label
    if (labelFormatter) {
      return (
        <div className={cn("font-medium", labelClassName)}>
          {labelFormatter(value, payload)}
        </div>
      )
    }
    if (!value) {
      return null
    }
    return <div className={cn("font-medium", labelClassName)}>{value}</div>
  }, [
    label,
    labelFormatter,
    payload,
    hideLabel,
    labelClassName,
    config,
    labelKey,
  ])
  if (!active || !payload?.length) {
    return null
  }
  const nestLabel = payload.length === 1 && indicator !== "dot"
  return (
    <div
      className={cn(
        "border-border/50 bg-background grid min-w-[8rem] items-start gap-1.5 rounded-lg border px-2.5 py-1.5 text-xs shadow-xl",
        className
      )}
    >
      {!nestLabel ? tooltipLabel : null}
      <div className="grid gap-1.5">
        {payload.map((item: any, index: number) => {
          const key = `${nameKey || item.name || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)
          const indicatorColor = color || item.payload?.fill || item.color
          return (
            <div
              key={item.dataKey || index}
              className={cn(
                "[&>svg]:text-muted-foreground flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5",
                indicator === "dot" && "items-center"
              )}
            >
              {formatter && item?.value !== undefined && item.name ? (
                formatter(item.value, item.name, item, index, item.payload)
              ) : (
                <>
                  {itemConfig?.icon ? (
                    <itemConfig.icon />
                  ) : (
                    !hideIndicator && (
                      <div
                        className={cn(
                          "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                          {
                            "h-2.5 w-2.5": indicator === "dot",
                            "w-1": indicator === "line",
                            "w-0 border-[1.5px] border-dashed bg-transparent":
                              indicator === "dashed",
                            "my-0.5": nestLabel && indicator === "dashed",
                          }
                        )}
                        style={
                          {
                            "--color-bg": indicatorColor,
                            "--color-border": indicatorColor,
                          } as React.CSSProperties
                        }
                      />
                    )
                  )}
                  <div
                    className={cn(
                      "flex flex-1 justify-between leading-none",
                      nestLabel ? "items-end" : "items-center"
                    )}
                  >
                    <div className="grid gap-1.5">
                      {nestLabel ? tooltipLabel : null}
                      <span className="text-muted-foreground">
                        {itemConfig?.label || item.name}
                      </span>
                    </div>
                    {item.value && (
                      <span className="text-foreground font-mono font-medium tabular-nums">
                        {item.value.toLocaleString()}
                      </span>
                    )}
                  </div>
                </>
              )}
            </div>
          )
        })}
      </div>
    </div>
  )
}
const ChartLegend = RechartsPrimitive.Legend
interface ChartLegendContentProps extends React.ComponentProps<"div"> {
  payload?: any[]
  verticalAlign?: "top" | "bottom"
  hideIcon?: boolean
  nameKey?: string
}
function ChartLegendContent({
  className,
  hideIcon = false,
  payload,
  verticalAlign = "bottom",
  nameKey,
}: ChartLegendContentProps) {
  const { config } = useChart()
  if (!payload?.length) {
    return null
  }
  return (
    <div
      className={cn(
        "flex items-center justify-center gap-4",
        verticalAlign === "top" ? "pb-3" : "pt-3",
        className
      )}
    >
      {payload.map((item: any) => {
        const key = `${nameKey || item.dataKey || "value"}`
        const itemConfig = getPayloadConfigFromPayload(config, item, key)
        return (
          <div
            key={item.value}
            className={cn(
              "[&>svg]:text-muted-foreground flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3"
            )}
          >
            {itemConfig?.icon && !hideIcon ? (
              <itemConfig.icon />
            ) : (
              <div
                className="h-2 w-2 shrink-0 rounded-[2px]"
                style={{
                  backgroundColor: item.color,
                }}
              />
            )}
            {itemConfig?.label}
          </div>
        )
      })}
    </div>
  )
}
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }
  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined
  let configLabelKey: string = key
  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }
  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}
export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}
</file>

<file path="components/ui/context-menu.tsx">
"use client"
import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { CheckIcon, ChevronRightIcon, CircleIcon } from "lucide-react"
import { cn } from "@/lib/utils"
function ContextMenu({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Root>) {
  return <ContextMenuPrimitive.Root data-slot="context-menu" {...props} />
}
function ContextMenuTrigger({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Trigger>) {
  return (
    <ContextMenuPrimitive.Trigger data-slot="context-menu-trigger" {...props} />
  )
}
function ContextMenuGroup({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Group>) {
  return (
    <ContextMenuPrimitive.Group data-slot="context-menu-group" {...props} />
  )
}
function ContextMenuPortal({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Portal>) {
  return (
    <ContextMenuPrimitive.Portal data-slot="context-menu-portal" {...props} />
  )
}
function ContextMenuSub({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Sub>) {
  return <ContextMenuPrimitive.Sub data-slot="context-menu-sub" {...props} />
}
function ContextMenuRadioGroup({
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.RadioGroup>) {
  return (
    <ContextMenuPrimitive.RadioGroup
      data-slot="context-menu-radio-group"
      {...props}
    />
  )
}
function ContextMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.SubTrigger> & {
  inset?: boolean
}) {
  return (
    <ContextMenuPrimitive.SubTrigger
      data-slot="context-menu-sub-trigger"
      data-inset={inset}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      {children}
      <ChevronRightIcon className="ml-auto" />
    </ContextMenuPrimitive.SubTrigger>
  )
}
function ContextMenuSubContent({
  className,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.SubContent>) {
  return (
    <ContextMenuPrimitive.SubContent
      data-slot="context-menu-sub-content"
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-context-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg",
        className
      )}
      {...props}
    />
  )
}
function ContextMenuContent({
  className,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Content>) {
  return (
    <ContextMenuPrimitive.Portal>
      <ContextMenuPrimitive.Content
        data-slot="context-menu-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-context-menu-content-available-height) min-w-[8rem] origin-(--radix-context-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md",
          className
        )}
        {...props}
      />
    </ContextMenuPrimitive.Portal>
  )
}
function ContextMenuItem({
  className,
  inset,
  variant = "default",
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Item> & {
  inset?: boolean
  variant?: "default" | "destructive"
}) {
  return (
    <ContextMenuPrimitive.Item
      data-slot="context-menu-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}
function ContextMenuCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.CheckboxItem>) {
  return (
    <ContextMenuPrimitive.CheckboxItem
      data-slot="context-menu-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      checked={checked}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <ContextMenuPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </ContextMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </ContextMenuPrimitive.CheckboxItem>
  )
}
function ContextMenuRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.RadioItem>) {
  return (
    <ContextMenuPrimitive.RadioItem
      data-slot="context-menu-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <ContextMenuPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </ContextMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </ContextMenuPrimitive.RadioItem>
  )
}
function ContextMenuLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Label> & {
  inset?: boolean
}) {
  return (
    <ContextMenuPrimitive.Label
      data-slot="context-menu-label"
      data-inset={inset}
      className={cn(
        "text-foreground px-2 py-1.5 text-sm font-medium data-[inset]:pl-8",
        className
      )}
      {...props}
    />
  )
}
function ContextMenuSeparator({
  className,
  ...props
}: React.ComponentProps<typeof ContextMenuPrimitive.Separator>) {
  return (
    <ContextMenuPrimitive.Separator
      data-slot="context-menu-separator"
      className={cn("bg-border -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}
function ContextMenuShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="context-menu-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className
      )}
      {...props}
    />
  )
}
export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}
</file>

<file path="components/ui/dialog.tsx">
"use client"
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"
import { cn } from "@/lib/utils"
function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />
}
function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />
}
function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />
}
function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />
}
function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}
function DialogContent({
  className,
  children,
  showCloseButton = true,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content> & {
  showCloseButton?: boolean
}) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      >
        {children}
        {showCloseButton && (
          <DialogPrimitive.Close
            data-slot="dialog-close"
            className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*=\'size-\ather\])]:size-4"
          >
            <XIcon />
            <span className="sr-only">Close</span>
          </DialogPrimitive.Close>
        )}
      </DialogPrimitive.Content>
    </DialogPortal>
  )
}
function DialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}
function DialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}
function DialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg leading-none font-semibold", className)}
      {...props}
    />
  )
}
function DialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}
export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
}
</file>

<file path="components/ui/dropdown-menu.tsx">
"use client"
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { CheckIcon, ChevronRightIcon, CircleIcon } from "lucide-react"
import { cn } from "@/lib/utils"
function DropdownMenu({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {
  return <DropdownMenuPrimitive.Root data-slot="dropdown-menu" {...props} />
}
function DropdownMenuPortal({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {
  return (
    <DropdownMenuPrimitive.Portal data-slot="dropdown-menu-portal" {...props} />
  )
}
function DropdownMenuTrigger({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {
  return (
    <DropdownMenuPrimitive.Trigger
      data-slot="dropdown-menu-trigger"
      {...props}
    />
  )
}
function DropdownMenuContent({
  className,
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {
  return (
    <DropdownMenuPrimitive.Portal>
      <DropdownMenuPrimitive.Content
        data-slot="dropdown-menu-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md",
          className
        )}
        {...props}
      />
    </DropdownMenuPrimitive.Portal>
  )
}
function DropdownMenuGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {
  return (
    <DropdownMenuPrimitive.Group data-slot="dropdown-menu-group" {...props} />
  )
}
function DropdownMenuItem({
  className,
  inset,
  variant = "default",
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {
  inset?: boolean
  variant?: "default" | "destructive"
}) {
  return (
    <DropdownMenuPrimitive.Item
      data-slot="dropdown-menu-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}
function DropdownMenuCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {
  return (
    <DropdownMenuPrimitive.CheckboxItem
      data-slot="dropdown-menu-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      checked={checked}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.CheckboxItem>
  )
}
function DropdownMenuRadioGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {
  return (
    <DropdownMenuPrimitive.RadioGroup
      data-slot="dropdown-menu-radio-group"
      {...props}
    />
  )
}
function DropdownMenuRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {
  return (
    <DropdownMenuPrimitive.RadioItem
      data-slot="dropdown-menu-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.RadioItem>
  )
}
function DropdownMenuLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.Label
      data-slot="dropdown-menu-label"
      data-inset={inset}
      className={cn(
        "px-2 py-1.5 text-sm font-medium data-[inset]:pl-8",
        className
      )}
      {...props}
    />
  )
}
function DropdownMenuSeparator({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {
  return (
    <DropdownMenuPrimitive.Separator
      data-slot="dropdown-menu-separator"
      className={cn("bg-border -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}
function DropdownMenuShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="dropdown-menu-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className
      )}
      {...props}
    />
  )
}
function DropdownMenuSub({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {
  return <DropdownMenuPrimitive.Sub data-slot="dropdown-menu-sub" {...props} />
}
function DropdownMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.SubTrigger
      data-slot="dropdown-menu-sub-trigger"
      data-inset={inset}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8",
        className
      )}
      {...props}
    >
      {children}
      <ChevronRightIcon className="ml-auto size-4" />
    </DropdownMenuPrimitive.SubTrigger>
  )
}
function DropdownMenuSubContent({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {
  return (
    <DropdownMenuPrimitive.SubContent
      data-slot="dropdown-menu-sub-content"
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg",
        className
      )}
      {...props}
    />
  )
}
export {
  DropdownMenu,
  DropdownMenuPortal,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuLabel,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuSub,
  DropdownMenuSubTrigger,
  DropdownMenuSubContent,
}
</file>

<file path="components/ui/input.tsx">
import * as React from "react"
import { cn } from "@/lib/utils"
function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  )
}
export { Input }
</file>

<file path="components/ui/label.tsx">
"use client"
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cn } from "@/lib/utils"
function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props}
    />
  )
}
export { Label }
</file>

<file path="components/ui/pagination.tsx">
import * as React from "react"
import {
  ChevronLeftIcon,
  ChevronRightIcon,
  MoreHorizontalIcon,
} from "lucide-react"
import { cn } from "@/lib/utils"
import { Button, buttonVariants } from "@/components/ui/button"
function Pagination({ className, ...props }: React.ComponentProps<"nav">) {
  return (
    <nav
      role="navigation"
      aria-label="pagination"
      data-slot="pagination"
      className={cn("mx-auto flex w-full justify-center", className)}
      {...props}
    />
  )
}
function PaginationContent({
  className,
  ...props
}: React.ComponentProps<"ul">) {
  return (
    <ul
      data-slot="pagination-content"
      className={cn("flex flex-row items-center gap-1", className)}
      {...props}
    />
  )
}
function PaginationItem({ ...props }: React.ComponentProps<"li">) {
  return <li data-slot="pagination-item" {...props} />
}
type PaginationLinkProps = {
  isActive?: boolean
} & Pick<React.ComponentProps<typeof Button>, "size"> &
  React.ComponentProps<"a">
function PaginationLink({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) {
  return (
    <a
      aria-current={isActive ? "page" : undefined}
      data-slot="pagination-link"
      data-active={isActive}
      className={cn(
        buttonVariants({
          variant: isActive ? "outline" : "ghost",
          size,
        }),
        className
      )}
      {...props}
    />
  )
}
function PaginationPrevious({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) {
  return (
    <PaginationLink
      aria-label="Go to previous page"
      size="default"
      className={cn("gap-1 px-2.5 sm:pl-2.5", className)}
      {...props}
    >
      <ChevronLeftIcon />
      <span className="hidden sm:block">Previous</span>
    </PaginationLink>
  )
}
function PaginationNext({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) {
  return (
    <PaginationLink
      aria-label="Go to next page"
      size="default"
      className={cn("gap-1 px-2.5 sm:pr-2.5", className)}
      {...props}
    >
      <span className="hidden sm:block">Next</span>
      <ChevronRightIcon />
    </PaginationLink>
  )
}
function PaginationEllipsis({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      aria-hidden
      data-slot="pagination-ellipsis"
      className={cn("flex size-9 items-center justify-center", className)}
      {...props}
    >
      <MoreHorizontalIcon className="size-4" />
      <span className="sr-only">More pages</span>
    </span>
  )
}
export {
  Pagination,
  PaginationContent,
  PaginationLink,
  PaginationItem,
  PaginationPrevious,
  PaginationNext,
  PaginationEllipsis,
}
</file>

<file path="components/ui/select.tsx">
"use client"
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react"
import { cn } from "@/lib/utils"
function Select({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Root>) {
  return <SelectPrimitive.Root data-slot="select" {...props} />
}
function SelectGroup({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Group>) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />
}
function SelectValue({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Value>) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />
}
function SelectTrigger({
  className,
  size = "default",
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {
  size?: "sm" | "default"
}) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      data-size={size}
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  )
}
function SelectContent({
  className,
  children,
  position = "popper",
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Content>) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className
        )}
        position={position}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            "p-1",
            position === "popper" &&
              "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1"
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  )
}
function SelectLabel({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Label>) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn("text-muted-foreground px-2 py-1.5 text-xs", className)}
      {...props}
    />
  )
}
function SelectItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Item>) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className
      )}
      {...props}
    >
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  )
}
function SelectSeparator({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Separator>) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn("bg-border pointer-events-none -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}
function SelectScrollUpButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  )
}
function SelectScrollDownButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>
  )
}
export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
}
</file>

<file path="components/ui/separator.tsx">
"use client"
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"
import { cn } from "@/lib/utils"
function Separator({
  className,
  orientation = "horizontal",
  decorative = true,
  ...props
}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {
  return (
    <SeparatorPrimitive.Root
      data-slot="separator"
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px",
        className
      )}
      {...props}
    />
  )
}
export { Separator }
</file>

<file path="components/ui/sonner.tsx">
"use client"
import { useTheme } from "next-themes"
import { Toaster as Sonner, ToasterProps } from "sonner"
const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()
  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      style={
        {
          "--normal-bg": "var(--popover)",
          "--normal-text": "var(--popover-foreground)",
          "--normal-border": "var(--border)",
        } as React.CSSProperties
      }
      {...props}
    />
  )
}
export { Toaster }
</file>

<file path="components/ui/table.tsx">
"use client"
import * as React from "react"
import { cn } from "@/lib/utils"
function Table({ className, ...props }: React.ComponentProps<"table">) {
  return (
    <div
      data-slot="table-container"
      className="relative w-full overflow-x-auto"
    >
      <table
        data-slot="table"
        className={cn("w-full caption-bottom text-sm", className)}
        {...props}
      />
    </div>
  )
}
function TableHeader({ className, ...props }: React.ComponentProps<"thead">) {
  return (
    <thead
      data-slot="table-header"
      className={cn("[&_tr]:border-b", className)}
      {...props}
    />
  )
}
function TableBody({ className, ...props }: React.ComponentProps<"tbody">) {
  return (
    <tbody
      data-slot="table-body"
      className={cn("[&_tr:last-child]:border-0", className)}
      {...props}
    />
  )
}
function TableFooter({ className, ...props }: React.ComponentProps<"tfoot">) {
  return (
    <tfoot
      data-slot="table-footer"
      className={cn(
        "bg-muted/50 border-t font-medium [&>tr]:last:border-b-0",
        className
      )}
      {...props}
    />
  )
}
function TableRow({ className, ...props }: React.ComponentProps<"tr">) {
  return (
    <tr
      data-slot="table-row"
      className={cn(
        "hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors",
        className
      )}
      {...props}
    />
  )
}
function TableHead({ className, ...props }: React.ComponentProps<"th">) {
  return (
    <th
      data-slot="table-head"
      className={cn(
        "text-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className
      )}
      {...props}
    />
  )
}
function TableCell({ className, ...props }: React.ComponentProps<"td">) {
  return (
    <td
      data-slot="table-cell"
      className={cn(
        "p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className
      )}
      {...props}
    />
  )
}
function TableCaption({
  className,
  ...props
}: React.ComponentProps<"caption">) {
  return (
    <caption
      data-slot="table-caption"
      className={cn("text-muted-foreground mt-4 text-sm", className)}
      {...props}
    />
  )
}
export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}
</file>

<file path="components/ui/tooltip.tsx">
"use client"
import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"
import { cn } from "@/lib/utils"
function TooltipProvider({
  delayDuration = 0,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {
  return (
    <TooltipPrimitive.Provider
      data-slot="tooltip-provider"
      delayDuration={delayDuration}
      {...props}
    />
  )
}
function Tooltip({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Root>) {
  return (
    <TooltipProvider>
      <TooltipPrimitive.Root data-slot="tooltip" {...props} />
    </TooltipProvider>
  )
}
function TooltipTrigger({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {
  return <TooltipPrimitive.Trigger data-slot="tooltip-trigger" {...props} />
}
function TooltipContent({
  className,
  sideOffset = 0,
  children,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Content>) {
  return (
    <TooltipPrimitive.Portal>
      <TooltipPrimitive.Content
        data-slot="tooltip-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance",
          className
        )}
        {...props}
      >
        {children}
        <TooltipPrimitive.Arrow className="bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]" />
      </TooltipPrimitive.Content>
    </TooltipPrimitive.Portal>
  )
}
export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }
</file>

<file path="components/user/user-menu.tsx">
"use client"
import { useState } from 'react'
import { ExternalLink, Eye, AlertTriangle, Settings, Ban, Shield, Crown } from 'lucide-react'
import { useUser } from '@/contexts/user-context'
import Image from 'next/image'
import {
  ContextMenu,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuTrigger,
} from "@/components/ui/context-menu"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogClose,
} from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
interface User {
  avatar: string
  banned: boolean
  color: number
  discordid: string | null
  firstjoin: number
  lastseen: number
  name: string
  playtime: number
  power: number
  rank: string
  scrapcoins: number
  uid: string
}
interface UserMenuProps {
  user: User
  children: React.ReactNode
}
interface CurrentUser {
  rank: string
}
export function UserMenu({ user, children }: UserMenuProps) {
  const { userInfo: currentUser } = useUser()
  const [viewProfileOpen, setViewProfileOpen] = useState(false)
  const canSetRank = currentUser?.rank === 'Staff Manager' || currentUser?.rank === 'Owner'
  const handleSteamProfile = () => {
    window.open(`https://steamcommunity.com/profiles/${user.uid}`, '_blank')
  }
  const handleGrustProfile = () => {
    window.open(`https://grust.co/profile/${user.uid}`, '_blank')
  }
  const contextMenuItems = (
    <>
      <ContextMenuLabel>Player Actions</ContextMenuLabel>
      <ContextMenuItem onClick={() => setViewProfileOpen(true)}>
        <Eye className="mr-2 h-4 w-4" />
        View Profile
      </ContextMenuItem>
      <ContextMenuItem>
        <AlertTriangle className="mr-2 h-4 w-4" />
        View Warn
      </ContextMenuItem>
      <ContextMenuItem disabled>
        <Settings className="mr-2 h-4 w-4" />
        Advanced Info
      </ContextMenuItem>
      <ContextMenuSeparator />
      <ContextMenuItem disabled>
        <Ban className="mr-2 h-4 w-4" />
        Ban
      </ContextMenuItem>
      <ContextMenuItem disabled>
        <Shield className="mr-2 h-4 w-4" />
        Warn
      </ContextMenuItem>
      {canSetRank && (
        <ContextMenuItem disabled>
          <Crown className="mr-2 h-4 w-4" />
          Set Rank
        </ContextMenuItem>
      )}
    </>
  )
  return (
    <>
      <ContextMenu>
        <ContextMenuTrigger asChild>
          {children}
        </ContextMenuTrigger>
        <ContextMenuContent>
          {contextMenuItems}
        </ContextMenuContent>
      </ContextMenu>
      <Dialog open={viewProfileOpen} onOpenChange={setViewProfileOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>View Profile</DialogTitle>
            <DialogDescription>
              Choose where to view {user.name}'s profile:
            </DialogDescription>
          </DialogHeader>
          <div className="flex items-center gap-3 py-4">
            <Image
              src={user.avatar}
              alt={user.name}
              width={48}
              height={48}
              className="rounded-full"
              unoptimized
            />
            <div>
              <p className="font-medium">{user.name}</p>
              <p className="text-sm text-muted-foreground font-mono">{user.uid}</p>
            </div>
          </div>
          <DialogFooter className="flex-col sm:flex-row sm:justify-between">
            <div className="flex flex-col sm:flex-row gap-2">
              <Button
                variant="outline"
                onClick={handleSteamProfile}
              >
                <ExternalLink className="mr-2 h-4 w-4" />
                Open in Steam
              </Button>
              <Button
                onClick={handleGrustProfile}
              >
                <ExternalLink className="mr-2 h-4 w-4" />
                Open in gRust
              </Button>
            </div>
            <DialogClose asChild>
              <Button variant="outline" className="hidden sm:flex">Cancel</Button>
            </DialogClose>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  )
}
</file>

<file path="contexts/user-context.tsx">
"use client"
import { createContext, useContext, useEffect, useState } from 'react'
import { useSession } from 'next-auth/react'
interface UserInfo {
  avatar: string
  banned: boolean
  color: number
  discordid: string
  firstjoin: number
  lastseen: number
  name: string
  playtime: number
  power: number
  rank: string
  scrapcoins: number
  uid: string
}
interface UserContextType {
  userInfo: UserInfo | null
  loading: boolean
  error: string | null
}
const UserContext = createContext<UserContextType>({
  userInfo: null,
  loading: false,
  error: null
})
export const UserProvider = ({ children }: { children: React.ReactNode }) => {
  const { data: session, status } = useSession()
  const [userInfo, setUserInfo] = useState<UserInfo | null>(null)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  useEffect(() => {
    if (status === 'authenticated' && session && !userInfo && !loading) {
      const fetchUserInfo = async () => {
        setLoading(true)
        setError(null)
        try {
          const response = await fetch('/api/me')
          if (response.ok) {
            const data = await response.json()
            if (data.success) {
              setUserInfo(data.data)
            }
          }
        } catch (err) {
          setError('Failed to fetch user info')
          console.error('Failed to fetch user info:', err)
        } finally {
          setLoading(false)
        }
      }
      fetchUserInfo()
    }
    if (status === 'unauthenticated') {
      setUserInfo(null)
      setError(null)
    }
  }, [status, session, userInfo, loading])
  return (
    <UserContext.Provider value={{ userInfo, loading, error }}>
      {children}
    </UserContext.Provider>
  )
}
export const useUser = () => {
  return useContext(UserContext)
}
</file>

<file path="lib/utils.ts">
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="LICENSE">
MIT License

Copyright (c) 2025 TuPiDAn

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
</file>

<file path="postcss.config.mjs">
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;
</file>

<file path="types/next-auth.d.ts">
import 'next-auth'
declare module 'next-auth' {
  interface Session {
    user: {
      steam?: unknown
    } & DefaultSession['user']
  }
}
</file>

<file path="app/api/set-jwt/route.ts">
import { NextRequest, NextResponse } from "next/server";
export async function POST(request: NextRequest) {
  try {
    const { jwt } = await request.json();
    if (!jwt) {
      return NextResponse.json({ error: "JWT is required" }, { status: 400 });
    }
    const response = NextResponse.json({ success: true });
    response.cookies.set({
      name: "jwt",
      value: jwt,
      httpOnly: true,
      path: "/",
      sameSite: "strict",
      secure: false,
      maxAge: 60 * 60 * 24 * 7,
    });
    return response;
  } catch (error) {
    return NextResponse.json({ error: "Failed to set JWT" }, { status: 500 });
  }
}
</file>

<file path="app/api/test-jwt/route.ts">
import { NextRequest, NextResponse } from "next/server";
export async function GET(request: NextRequest) {
  const jwt = request.cookies.get("jwt");
  if (!jwt) {
    return NextResponse.json({
      success: false,
      message: "JWT not found"
    }, { status: 401 });
  }
  try {
    const res = await fetch("https://grust.co/api/users/me", {
      headers: {
        "Cookie": `jwt=${jwt.value}`,
        'Content-Type': 'application/json'
      },
    });
    const data = await res.json();
    if (data.success) {
      return NextResponse.json({
        success: true,
        message: "JWT is valid",
        user: data.data
      });
    } else {
      return NextResponse.json({
        success: false,
        message: "JWT is invalid",
        error: data.error
      });
    }
  } catch (error) {
    return NextResponse.json({
      success: false,
      message: "Network error",
      error: String(error)
    });
  }
}
</file>

<file path="app/api/users/route.ts">
import { NextRequest, NextResponse } from 'next/server';
export async function GET(request: NextRequest) {
  try {
    const jwt = request.cookies.get("jwt");
    const { searchParams } = new URL(request.url);
    const search = searchParams.get('search') || '';
    const limit = parseInt(searchParams.get('limit') || '21');
    const offset = parseInt(searchParams.get('offset') || '0');
    if (!jwt) {
      return NextResponse.json({
        error: "JWT not found. Please configure your JWT token in settings."
      }, { status: 401 });
    }
    const response = await fetch(`https://grust.co/api/users?search=${search}&limit=${limit}&offset=${offset}`, {
      headers: {
        "Cookie": `jwt=${jwt.value}`,
        'Content-Type': 'application/json'
      },
    });
    if (!response.ok) {
      return NextResponse.json({
        error: `API request failed with status ${response.status}`
      }, { status: response.status });
    }
    const apiData = await response.json();
    if (apiData.success === false) {
      return NextResponse.json({
        error: "Invalid API response"
      }, { status: 500 });
    }
    return NextResponse.json(apiData.data || apiData);
  } catch (error) {
    console.error('Users API Error:', error);
    return NextResponse.json({
      error: "Failed to fetch users from external API"
    }, { status: 500 });
  }
}
</file>

<file path="app/settings/layout.tsx">
export default function SettingsLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <div className="min-h-screen bg-background">
      <main className="container py-4">{children}</main>
    </div>
  );
}
</file>

<file path="app/settings/page.tsx">
import { cookies } from 'next/headers';
import SettingsClient from './settings-client';
import { Metadata } from 'next';
export const metadata: Metadata = {
  title: "Settings",
};
export default async function SettingsPage() {
  const cookieStore =  cookies();
  const jwt = (await cookieStore).get('jwt')?.value || '';
  return <SettingsClient initialJwt={jwt} />;
}
</file>

<file path="lib/auth-wrapper.ts">
import type { AuthOptions } from 'next-auth'
import type { NextRequest } from 'next/server'
let Steam: any = null
if (typeof window === 'undefined') {
  try {
    Steam = require('next-auth-steam').default
  } catch (error) {
    console.warn('Steam provider not available:', error)
  }
}
export function authOptions(req?: NextRequest): AuthOptions {
  return {
    providers: req && Steam
      ? [
          Steam(req, {
            clientSecret: process.env.STEAM_API_KEY!
          })
        ]
      : [],
    callbacks: {
      jwt({ token, account, profile }) {
        if (account?.provider === 'steam') {
          token.steam = profile
        }
        return token
      },
      session({ session, token }) {
        if (session.user && 'steam' in token) {
          session.user.steam = token.steam
        }
        return session
      }
    }
  }
}
</file>

<file path="next.config.ts">
import type { NextConfig } from "next";
const nextConfig: NextConfig = {
};
export default nextConfig;
</file>

<file path="tailwind.config.js">
module.exports = {
  darkMode: ["class"],
  content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      screens: {
        '3xl': '1792px',
        '4xl': '2048px',
        '5xl': '2304px',
        '6xl': '2560px',
      },
      gridTemplateColumns: {
        '7': 'repeat(7, minmax(0, 1fr))',
        '8': 'repeat(8, minmax(0, 1fr))',
        '9': 'repeat(9, minmax(0, 1fr))',
        '10': 'repeat(10, minmax(0, 1fr))',
      },
      keyframes: {
        "accordion-down": {
          from: { height: 0 },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: 0 },
        },
        "caret-blink": {
          "0%,70%,100%": { opacity: "1" },
          "20%,50%": { opacity: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
        "caret-blink": "caret-blink 1.25s ease-out infinite",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
}
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts", "tailwing.config.js"],
  "exclude": ["node_modules"]
}
</file>

<file path="app/api/auth/[...nextauth]/route.ts">
import NextAuth from 'next-auth'
import type { NextRequest } from 'next/server'
import { authOptions } from '../../../../auth'
async function auth(req: NextRequest, ctx: any) {
  return NextAuth(req, ctx, authOptions(req))
}
export { auth as GET, auth as POST }
</file>

<file path="app/api/stats/route.ts">
import { NextRequest, NextResponse } from 'next/server';
export async function GET(request: NextRequest) {
  try {
    const jwt = request.cookies.get("jwt");
    const { searchParams } = new URL(request.url);
    const requestedDays = parseInt(searchParams.get('days') || '5');
    if (!jwt) {
      return NextResponse.json({
        error: "JWT not found. Please configure your JWT token in settings."
      }, { status: 401 });
    }
    const response = await fetch("https://grust.co/api/util/stats", {
      headers: {
        "Cookie": `jwt=${jwt.value}`,
        'Content-Type': 'application/json'
      },
    });
    if (!response.ok) {
      return NextResponse.json({
        error: `API request failed with status ${response.status}`
      }, { status: response.status });
    }
    const apiData = await response.json();
    const statsData = apiData.data || apiData;
    if (apiData.success === false || !statsData.week_data) {
      return NextResponse.json({
        error: "Invalid API response format"
      }, { status: 500 });
    }
    let weekData = statsData.week_data;
    if (requestedDays === 3) {
      weekData = weekData.slice(-3);
    } else if (requestedDays === 5) {
      weekData = weekData.slice(-5);
    }
    const today = new Date();
    const formattedWeekData = weekData.map((day: any, index: number) => {
      const dayDate = new Date(today);
      const daysBack = weekData.length - 1 - index;
      dayDate.setDate(today.getDate() - daysBack);
      const dayOfWeek = dayDate.toLocaleDateString('en-US', { weekday: 'short' });
      const dayOfMonth = dayDate.getDate();
      return {
        name: `${dayOfWeek}(${dayOfMonth})`,
        bans: day.bans || 0,
        new_players: day.new_players || 0,
        unbans: day.unbans || 0,
        date: dayDate.toISOString().split('T')[0]
      };
    });
    const data = {
      today: {
        bans: statsData.today?.bans || 0,
        new_players: statsData.today?.new_players || 0,
        unbans: statsData.today?.unbans || 0,
      },
      yesterday: {
        bans: statsData.yesterday?.bans || 0,
        new_players: statsData.yesterday?.new_players || 0,
        unbans: statsData.yesterday?.unbans || 0,
      },
      week_data: formattedWeekData,
      best_days: statsData.best_days || [],
      total_players: statsData.total_players || 0,
      total_bans: statsData.total_bans || 0,
      new_players: statsData.new_players || 0,
    };
    return NextResponse.json(data);
  } catch (error) {
    console.error('Stats API Error:', error);
    return NextResponse.json({
      error: "Failed to fetch stats from external API"
    }, { status: 500 });
  }
}
</file>

<file path="app/globals.css">
@import "tailwindcss";
@import "tw-animate-css";
@custom-variant dark (&:is(.dark *));
:root {
  --background: oklch(1.0000 0 0);
  --foreground: oklch(0.3211 0 0);
  --card: oklch(1.0000 0 0);
  --card-foreground: oklch(0.3211 0 0);
  --popover: oklch(1.0000 0 0);
  --popover-foreground: oklch(0.3211 0 0);
  --primary: oklch(0.6231 0.1880 259.8145);
  --primary-foreground: oklch(1.0000 0 0);
  --secondary: oklch(0.9670 0.0029 264.5419);
  --secondary-foreground: oklch(0.4461 0.0263 256.8018);
  --muted: oklch(0.9846 0.0017 247.8389);
  --muted-foreground: oklch(0.5510 0.0234 264.3637);
  --accent: oklch(0.9514 0.0250 236.8242);
  --accent-foreground: oklch(0.3791 0.1378 265.5222);
  --destructive: oklch(0.6368 0.2078 25.3313);
  --destructive-foreground: oklch(1.0000 0 0);
  --border: oklch(0.9276 0.0058 264.5313);
  --input: oklch(0.9276 0.0058 264.5313);
  --ring: oklch(0.6231 0.1880 259.8145);
  --chart-1: oklch(0.6231 0.1880 259.8145);
  --chart-2: oklch(60.367% 0.22885 27.61);
  --chart-3: oklch(76.687% 0.25222 142.633);
  --chart-4: oklch(0.4244 0.1809 265.6377);
  --chart-5: oklch(0.3791 0.1378 265.5222);
  --sidebar: oklch(0.9846 0.0017 247.8389);
  --sidebar-foreground: oklch(0.3211 0 0);
  --sidebar-primary: oklch(0.6231 0.1880 259.8145);
  --sidebar-primary-foreground: oklch(1.0000 0 0);
  --sidebar-accent: oklch(0.9514 0.0250 236.8242);
  --sidebar-accent-foreground: oklch(0.3791 0.1378 265.5222);
  --sidebar-border: oklch(0.9276 0.0058 264.5313);
  --sidebar-ring: oklch(0.6231 0.1880 259.8145);
  --font-sans: Geist, ui-sans-serif, sans-serif, system-ui;
  --font-serif: Geist, ui-sans-serif, sans-serif, system-ui;
  --font-mono: Geist Mono, ui-monospace, monospace;
  --radius: 0.4rem;
  --shadow-2xs: 0.5px 1px 13px 0px hsl(0 0% 0% / 0.06);
  --shadow-xs: 0.5px 1px 13px 0px hsl(0 0% 0% / 0.06);
  --shadow-sm: 0.5px 1px 13px 0px hsl(0 0% 0% / 0.12), 0.5px 1px 2px -1px hsl(0 0% 0% / 0.12);
  --shadow: 0.5px 1px 13px 0px hsl(0 0% 0% / 0.12), 0.5px 1px 2px -1px hsl(0 0% 0% / 0.12);
  --shadow-md: 0.5px 1px 13px 0px hsl(0 0% 0% / 0.12), 0.5px 2px 4px -1px hsl(0 0% 0% / 0.12);
  --shadow-lg: 0.5px 1px 13px 0px hsl(0 0% 0% / 0.12), 0.5px 4px 6px -1px hsl(0 0% 0% / 0.12);
  --shadow-xl: 0.5px 1px 13px 0px hsl(0 0% 0% / 0.12), 0.5px 8px 10px -1px hsl(0 0% 0% / 0.12);
  --shadow-2xl: 0.5px 1px 13px 0px hsl(0 0% 0% / 0.30);
  --tracking-normal: 0.025em;
  --spacing: 0.25rem;
}
.dark {
  --background: oklch(0.1149 0 0);
  --foreground: oklch(0.9219 0 0);
  --card: oklch(0.1913 0 0);
  --card-foreground: oklch(0.9219 0 0);
  --popover: oklch(0.1913 0 0);
  --popover-foreground: oklch(0.9219 0 0);
  --primary: oklch(0.6231 0.1880 259.8145);
  --primary-foreground: oklch(1.0000 0 0);
  --secondary: oklch(0.1822 0 0);
  --secondary-foreground: oklch(0.9219 0 0);
  --muted: oklch(0.2686 0 0);
  --muted-foreground: oklch(0.7155 0 0);
  --accent: oklch(0.3791 0.1378 265.5222);
  --accent-foreground: oklch(0.8823 0.0571 254.1284);
  --destructive: oklch(0.6368 0.2078 25.3313);
  --destructive-foreground: oklch(1.0000 0 0);
  --border: oklch(0.3715 0 0);
  --input: oklch(0.3715 0 0);
  --ring: oklch(0.6231 0.1880 259.8145);
  --chart-1: oklch(0.7137 0.1434 254.6240);
  --chart-2: oklch(63.981% 0.22264 26.199);
  --chart-3: oklch(82.941% 0.2516 139.29);
  --chart-4: oklch(0.4882 0.2172 264.3763);
  --chart-5: oklch(0.4244 0.1809 265.6377);
  --sidebar: oklch(0.2046 0 0);
  --sidebar-foreground: oklch(0.9219 0 0);
  --sidebar-primary: oklch(0.6231 0.1880 259.8145);
  --sidebar-primary-foreground: oklch(1.0000 0 0);
  --sidebar-accent: oklch(0.3791 0.1378 265.5222);
  --sidebar-accent-foreground: oklch(0.8823 0.0571 254.1284);
  --sidebar-border: oklch(0.3715 0 0);
  --sidebar-ring: oklch(0.6231 0.1880 259.8145);
  --font-sans: Geist, ui-sans-serif, sans-serif, system-ui;
  --font-serif: Geist, ui-sans-serif, sans-serif, system-ui;
  --font-mono: Geist Mono, ui-monospace, monospace;
  --radius: 0.4rem;
  --shadow-2xs: 0.5px 1px 13px 0px hsl(0 0% 0% / 0.06);
  --shadow-xs: 0.5px 1px 13px 0px hsl(0 0% 0% / 0.06);
  --shadow-sm: 0.5px 1px 13px 0px hsl(0 0% 0% / 0.12), 0.5px 1px 2px -1px hsl(0 0% 0% / 0.12);
  --shadow: 0.5px 1px 13px 0px hsl(0 0% 0% / 0.12), 0.5px 1px 2px -1px hsl(0 0% 0% / 0.12);
  --shadow-md: 0.5px 1px 13px 0px hsl(0 0% 0% / 0.12), 0.5px 2px 4px -1px hsl(0 0% 0% / 0.12);
  --shadow-lg: 0.5px 1px 13px 0px hsl(0 0% 0% / 0.12), 0.5px 4px 6px -1px hsl(0 0% 0% / 0.12);
  --shadow-xl: 0.5px 1px 13px 0px hsl(0 0% 0% / 0.12), 0.5px 8px 10px -1px hsl(0 0% 0% / 0.12);
  --shadow-2xl: 0.5px 1px 13px 0px hsl(0 0% 0% / 0.30);
}
@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
  --font-sans: var(--font-sans);
  --font-mono: var(--font-mono);
  --font-serif: var(--font-serif);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --shadow-2xs: var(--shadow-2xs);
  --shadow-xs: var(--shadow-xs);
  --shadow-sm: var(--shadow-sm);
  --shadow: var(--shadow);
  --shadow-md: var(--shadow-md);
  --shadow-lg: var(--shadow-lg);
  --shadow-xl: var(--shadow-xl);
  --shadow-2xl: var(--shadow-2xl);
  --tracking-tighter: calc(var(--tracking-normal) - 0.05em);
  --tracking-tight: calc(var(--tracking-normal) - 0.025em);
  --tracking-normal: var(--tracking-normal);
  --tracking-wide: calc(var(--tracking-normal) + 0.025em);
  --tracking-wider: calc(var(--tracking-normal) + 0.05em);
  --tracking-widest: calc(var(--tracking-normal) + 0.1em);
}
body {
  letter-spacing: var(--tracking-normal);
}
.scrollbar-hide {
  -ms-overflow-style: none;
  scrollbar-width: none;
}
.scrollbar-hide::-webkit-scrollbar {
  display: none;
}
@keyframes spin-left {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(-360deg);
  }
}
.animate-spin-left {
  animation: spin-left 0.6s ease-in-out;
}
@keyframes infinite-scroll {
  0% {
    transform: translateX(0);
  }
  100% {
    transform: translateX(-1008px);
  }
}
@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}
</file>

<file path="app/settings/settings-client.tsx">
"use client";
import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { toast } from 'sonner';
import { useChart, ChartType } from '@/components/charts/chart-provider';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Icons } from '@/components/icons';
interface SettingsClientProps {
  initialJwt: string;
}
export default function SettingsClient({ initialJwt }: SettingsClientProps) {
  const [jwt, setJwt] = useState(initialJwt);
  const [isJwtVisible, setIsJwtVisible] = useState(false);
  const { chartType, setChartType } = useChart();
  const handleSave = async () => {
    if (!jwt.trim()) {
      toast.error('Please enter a valid JWT token');
      return;
    }
    try {
      const response = await fetch('/api/set-jwt', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ jwt }),
      });
      if (response.ok) {
        toast.success('JWT token saved successfully');
      } else {
        toast.error('Failed to save JWT token');
      }
    } catch (error) {
      toast.error('Failed to save JWT token');
    }
  };
  const handleClear = async () => {
    try {
      const response = await fetch('/api/clear-jwt', {
        method: 'POST',
      });
      if (response.ok) {
        setJwt('');
        toast.success('JWT token cleared');
      } else {
        toast.error('Failed to clear JWT token');
      }
    } catch (error) {
      toast.error('Failed to clear JWT token');
    }
  };
  const handleTestAPI = async () => {
    try {
      const response = await fetch('/api/test-jwt');
      const data = await response.json();
      if (data.success) {
        toast.success(`JWT is valid! User: ${data.user?.name || 'Unknown'}`);
      } else {
        toast.error(`JWT is invalid: ${data.message}`);
      }
    } catch (error) {
      toast.error('Failed to test JWT via API');
    }
  };
  return (
    <div className="flex flex-col lg:flex-row gap-4 md:gap-6 px-4">
      <div className="flex flex-col gap-4 md:gap-6 w-full lg:max-w-md">
        <Card>
          <CardHeader>
            <CardTitle className="text-lg md:text-xl">Authentication</CardTitle>
            <CardDescription>Manage your gRust Panel JWT token</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid gap-4">
              <div className="grid gap-2">
                <Label htmlFor="jwt">JWT Token</Label>
                <div className="relative flex items-center">
                  <Input
                    id="jwt"
                    placeholder="Enter your JWT token"
                    value={jwt}
                    onChange={(e) => setJwt(e.target.value)}
                    type={isJwtVisible ? 'text' : 'password'}
                    className="pr-10 text-xs md:text-sm"
                  />
                  <Button
                    variant="ghost"
                    size="icon"
                    className="absolute right-2 h-7 w-7"
                    onClick={() => setIsJwtVisible(!isJwtVisible)}
                  >
                    {isJwtVisible ? (
                      <Icons.eyeOff className="h-4 w-4" />
                    ) : (
                      <Icons.eye className="h-4 w-4" />
                    )}
                  </Button>
                </div>
              </div>
              <div className="flex flex-col sm:flex-row gap-2">
                <Button onClick={handleSave} className="flex-1">Save</Button>
                <Button onClick={handleClear} variant="outline" className="sm:w-auto">Clear</Button>
              </div>
              <Button onClick={handleTestAPI} variant="ghost" className="w-full">
                Test JWT
              </Button>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle className="text-lg md:text-xl">Customization</CardTitle>
            <CardDescription>Customize the appearance of your charts</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid gap-2">
              <Label>Chart Type</Label>
              <Select
                value={chartType}
                onValueChange={(value) => setChartType(value as ChartType)}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select a chart type" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="bar">Bar Chart</SelectItem>
                  <SelectItem value="area">Area Chart</SelectItem>
                  <SelectItem value="line">Line Chart</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </CardContent>
        </Card>
      </div>
      <div className="w-full lg:max-w-md">
        <Card>
          <CardHeader>
            <CardTitle className="text-lg md:text-xl">Information</CardTitle>
            <CardDescription>gRust Panel 2.0</CardDescription>
          </CardHeader>
          <CardContent>
            <p className="text-sm md:text-base">This is a new and improved version of the gRust Panel.</p>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
</file>

<file path="app/users/page.tsx">
"use client"
import { useState, useEffect, useRef, useCallback } from 'react'
import { Input } from "@/components/ui/input"
import { Card, CardContent } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Search, MoreVertical, Ban, Shield, Eye, AlertTriangle, Settings, Crown, ExternalLink } from 'lucide-react'
import Link from 'next/link'
import Image from 'next/image'
import {
  Pagination,
  PaginationContent,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from "@/components/ui/pagination"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { UserMenu } from "@/components/user/user-menu";
import { useUser } from '@/contexts/user-context'
interface User {
  avatar: string
  banned: boolean
  color: number
  discordid: string | null
  firstjoin: number
  lastseen: number
  name: string
  playtime: number
  power: number
  rank: string
  scrapcoins: number
  uid: string
}
interface UsersData {
  total: number
  users: User[]
}
function useScreenSize() {
  const [screenSize, setScreenSize] = useState('lg')
  const [isInitialized, setIsInitialized] = useState(false)
  useEffect(() => {
    const handleResize = () => {
      const width = window.innerWidth
      let newScreenSize = 'lg'
      if (width < 640) newScreenSize = 'mobile'
      else if (width < 768) newScreenSize = 'sm'
      else if (width < 1024) newScreenSize = 'md'
      else if (width < 1280) newScreenSize = 'lg'
      else if (width < 1536) newScreenSize = 'xl'
      else if (width < 1792) newScreenSize = '2xl'
      else if (width < 2048) newScreenSize = '3xl'
      else if (width < 2304) newScreenSize = '4xl'
      else if (width < 2560) newScreenSize = '5xl'
      else newScreenSize = '6xl'
      setScreenSize(newScreenSize)
      if (!isInitialized) {
        setIsInitialized(true)
      }
    }
    handleResize()
    window.addEventListener('resize', handleResize)
    return () => window.removeEventListener('resize', handleResize)
  }, [isInitialized])
  return { screenSize, isInitialized }
}
function getLimit(screenSize: string): number {
  const limits = {
    'mobile': 6,
    'sm': 14,
    'md': 15,
    'lg': 20,
    'xl': 15,
    '2xl': 24,
    '3xl': 36,
    '4xl': 36,
    '5xl': 36,
    '6xl': 48,
  }
  return limits[screenSize as keyof typeof limits] || 40
}
function useDebounce(value: string, delay: number) {
  const [debouncedValue, setDebouncedValue] = useState(value)
  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value)
    }, delay)
    return () => {
      clearTimeout(handler)
    }
  }, [value, delay])
  return debouncedValue
}
export default function UsersPage() {
  const [users, setUsers] = useState<User[]>([])
  const [total, setTotal] = useState(0)
  const [searchInput, setSearchInput] = useState('')
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [currentPage, setCurrentPage] = useState(1)
  const { screenSize, isInitialized } = useScreenSize()
  const limit = getLimit(screenSize)
  const [profileUser, setProfileUser] = useState<User | null>(null)
  const { userInfo: currentUser } = useUser()
  const canSetRank = currentUser?.rank === 'Staff Manager' || currentUser?.rank === 'Owner'
  const handleSteamProfile = (uid: string) => {
    window.open(`https://steamcommunity.com/profiles/${uid}`, '_blank')
  }
  const handleGrustProfile = (uid: string) => {
    window.open(`https://grust.co/profile/${uid}`, '_blank')
  }
  const debouncedSearch = useDebounce(searchInput, 1000)
  const prevParams = useRef<{
    search: string
    page: number
    limit: number
    isInitialized: boolean
  }>({
    search: '',
    page: 1,
    limit: 40,
    isInitialized: false
  })
  const fetchUsers = useCallback(async (searchQuery: string, page: number, currentLimit: number) => {
    try {
      setLoading(true)
      setError(null)
      const offset = (page - 1) * currentLimit
      const response = await fetch(`/api/users?search=${searchQuery}&limit=${currentLimit}&offset=${offset}`)
      if (!response.ok) {
        if (response.status === 401) {
          throw new Error('JWT not found. Please configure your JWT token in settings.')
        }
        const errorData = await response.json()
        throw new Error(errorData.error || `HTTP ${response.status}`)
      }
      const data: UsersData = await response.json()
      setUsers(data.users)
      setTotal(data.total)
    } catch (err: any) {
      setError(err.message || 'Failed to fetch users')
      console.error('Users Error:', err)
    } finally {
      setLoading(false)
    }
  }, [])
  useEffect(() => {
    if (!isInitialized) return
    const currentParams = {
      search: debouncedSearch,
      page: currentPage,
      limit,
      isInitialized
    }
    const paramsChanged = (
      prevParams.current.search !== currentParams.search ||
      prevParams.current.page !== currentParams.page ||
      prevParams.current.limit !== currentParams.limit ||
      !prevParams.current.isInitialized
    )
    if (paramsChanged) {
      if (prevParams.current.search !== currentParams.search && prevParams.current.isInitialized) {
        setCurrentPage(1)
        fetchUsers(debouncedSearch, 1, limit)
      } else if (prevParams.current.limit !== currentParams.limit && prevParams.current.isInitialized) {
        setCurrentPage(1)
        fetchUsers(debouncedSearch, 1, limit)
      } else {
        fetchUsers(debouncedSearch, currentPage, limit)
      }
      prevParams.current = currentParams
    }
  }, [debouncedSearch, currentPage, limit, isInitialized, fetchUsers])
  const handleSearch = (value: string) => {
    setSearchInput(value)
  }
  const decimalToHex = (decimal: number): string => {
    return `#${decimal.toString(16).padStart(6, '0')}`
  }
  const isOnline = (lastseen: number): boolean => {
    const now = Math.floor(Date.now() / 1000)
    return Math.abs(now - lastseen) < 60
  }
  const formatLastSeen = (lastseen: number): string => {
    if (isOnline(lastseen)) {
      return 'Online'
    }
    const date = new Date(lastseen * 1000)
    const now = new Date()
    const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000)
    if (diffInSeconds < 60) return 'Just now'
    if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}m ago`
    if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)}h ago`
    return `${Math.floor(diffInSeconds / 86400)}d ago`
  }
  const totalPages = Math.ceil(total / limit)
  const generatePaginationItems = () => {
    const items = []
    const maxVisiblePages = 5
    let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2))
    let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1)
    if (endPage - startPage + 1 < maxVisiblePages) {
      startPage = Math.max(1, endPage - maxVisiblePages + 1)
    }
    for (let i = startPage; i <= endPage; i++) {
      items.push(
        <PaginationItem key={i}>
          <PaginationLink
            href="#"
            onClick={(e) => {
              e.preventDefault()
              setCurrentPage(i)
            }}
            isActive={currentPage === i}
          >
            {i}
          </PaginationLink>
        </PaginationItem>
      )
    }
    return items
  }
  const generateLoadingCards = () => {
    return [...Array(limit)].map((_, index) => (
      <Card key={index} className="animate-pulse">
        <CardContent className="p-4">
          <div className="flex items-start gap-3">
            <div className="w-12 h-12 bg-muted rounded-full flex-shrink-0" />
            <div className="flex-1 space-y-2 min-w-0">
              <div className="h-4 bg-muted rounded w-3/4" />
              <div className="h-3 bg-muted rounded w-1/2" />
              <div className="h-3 bg-muted rounded w-1/4" />
            </div>
          </div>
        </CardContent>
      </Card>
    ))
  }
  return (
    <div className="min-h-screen bg-background">
      <main className="py-4 max-w-full mx-auto">
        <div className="space-y-6 px-4">
          <div className="flex justify-center w-full">
            <div className="relative w-full max-w-md">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4" />
              <Input
                placeholder="Search users..."
                value={searchInput}
                onChange={(e) => handleSearch(e.target.value)}
                className="pl-10"
              />
              {}
              {searchInput !== debouncedSearch && (
                <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-primary"></div>
                </div>
              )}
            </div>
          </div>
          {loading ? (
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 2xl:grid-cols-6 3xl:grid-cols-7 4xl:grid-cols-8 5xl:grid-cols-9 6xl:grid-cols-10 gap-4">
              {generateLoadingCards()}
            </div>
          ) : error ? (
            <div className="flex flex-col items-center justify-center min-h-[400px] gap-4">
              <p className="text-red-500 text-center">{error}</p>
              {error.includes('JWT not found') && (
                <div className="text-center">
                  <p className="text-sm text-muted-foreground mb-2">
                    You need to configure your JWT token
                  </p>
                  <Button asChild>
                    <Link href="/settings">Go to Settings</Link>
                  </Button>
                </div>
              )}
              <Button onClick={() => fetchUsers(debouncedSearch, currentPage, limit)} variant="outline">
                Retry
              </Button>
            </div>
          ) : (
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 2xl:grid-cols-6 3xl:grid-cols-7 4xl:grid-cols-8 5xl:grid-cols-9 6xl:grid-cols-10 gap-4">
              {users.map((user) => (
                <UserMenu key={user.uid} user={user}>
                  <Card className="hover:shadow-md transition-shadow cursor-context-menu">
                    <CardContent className="px-2 py-1 relative">
                      <div className="flex items-start gap-4">
                        <div className="relative flex-shrink-0">
                          <Image
                            src={user.avatar}
                            alt={user.name}
                            width={48}
                            height={48}
                            className="rounded-full"
                            unoptimized
                          />
                          {isOnline(user.lastseen) ? (
                            <div className="absolute -bottom-1 -right-1 w-4 h-4 bg-green-500 rounded-full border-2 border-background" />
                          ) : (
                            <div className="absolute -bottom-1 -right-1 w-4 h-4 bg-red-500 rounded-full border-2 border-background" />
                          )}
                        </div>
                        <div className="flex-1 min-w-0">
                          <div className="flex items-center gap-1 flex-wrap mb-2">
                            <h3 className="font-semibold text-sm truncate">{user.name}</h3>
                            <Badge
                              variant="secondary"
                              className="text-xs px-1 py-0"
                              style={{
                                backgroundColor: decimalToHex(user.color) + '20',
                                color: decimalToHex(user.color),
                                borderColor: decimalToHex(user.color) + '40'
                              }}
                            >
                              {user.rank}
                            </Badge>
                            {user.banned && (
                              <Badge variant="destructive" className="text-xs px-1 py-0">
                                Banned
                              </Badge>
                            )}
                          </div>
                          <p className="text-xs text-muted-foreground font-mono mb-1 break-all">
                            {user.uid}
                          </p>
                          <p className={`text-xs font-medium ${isOnline(user.lastseen) ? 'text-green-500' : 'text-muted-foreground'}`}>
                            {formatLastSeen(user.lastseen)}
                          </p>
                        </div>
                        <div className="flex flex-col gap-1 items-center absolute right-2 top-1/2 transform -translate-y-1/2">
                          <DropdownMenu>
                            <DropdownMenuTrigger asChild>
                              <Button
                                variant="ghost"
                                size="icon"
                                className="h-8 w-8"
                                onClick={(e) => e.stopPropagation()}
                              >
                                <MoreVertical className="h-5 w-5" />
                              </Button>
                            </DropdownMenuTrigger>
                            <DropdownMenuContent align="end">
                              <DropdownMenuLabel>Player Actions</DropdownMenuLabel>
                              <DropdownMenuItem onClick={(e) => { e.stopPropagation(); setProfileUser(user); }}>
                                <Eye className="mr-2 h-4 w-4" />
                                View Profile
                              </DropdownMenuItem>
                              <DropdownMenuItem>
                                <AlertTriangle className="mr-2 h-4 w-4" />
                                View Warn
                              </DropdownMenuItem>
                              <DropdownMenuItem disabled>
                                <Settings className="mr-2 h-4 w-4" />
                                Advanced Info
                              </DropdownMenuItem>
                              <DropdownMenuSeparator />
                              <DropdownMenuItem disabled>
                                <Ban className="mr-2 h-4 w-4" />
                                Ban
                              </DropdownMenuItem>
                              <DropdownMenuItem disabled>
                                <Shield className="mr-2 h-4 w-4" />
                                Warn
                              </DropdownMenuItem>
                              {canSetRank && (
                                <DropdownMenuItem disabled>
                                  <Crown className="mr-2 h-4 w-4" />
                                  Set Rank
                                </DropdownMenuItem>
                              )}
                            </DropdownMenuContent>
                          </DropdownMenu>
                          {user.banned ? (
                            <Button
                              size="icon"
                              variant="outline"
                              className="h-7 w-7"
                              disabled
                              onClick={(e) => e.stopPropagation()}
                            >
                              <Shield className="h-4 w-4 text-green-600" />
                            </Button>
                          ) : (
                            <Button
                              size="icon"
                              variant="outline"
                              className="h-7 w-7"
                              disabled
                              onClick={(e) => e.stopPropagation()}
                            >
                              <Ban className="h-4 w-4 text-red-600" />
                            </Button>
                          )}
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </UserMenu>
              ))}
            </div>
          )}
          {!loading && !error && totalPages > 1 && (
            <div className="flex justify-between items-center">
              <div className="flex items-center gap-4">
                <p className="text-sm text-muted-foreground">
                  Total: {total.toLocaleString()} users
                </p>
                <div className="text-xs text-muted-foreground">
                  {screenSize} | Showing: {limit}
                </div>
              </div>
              <Pagination className="!mx-0 !w-auto !justify-end">
                <PaginationContent>
                  <PaginationItem>
                    <PaginationPrevious
                      href="#"
                      onClick={(e) => {
                        e.preventDefault()
                        if (currentPage > 1) {
                          setCurrentPage(currentPage - 1)
                        }
                      }}
                      className={currentPage === 1 ? 'pointer-events-none opacity-50' : ''}
                    />
                  </PaginationItem>
                  {generatePaginationItems()}
                  <PaginationItem>
                    <PaginationNext
                      href="#"
                      onClick={(e) => {
                        e.preventDefault()
                        if (currentPage < totalPages) {
                          setCurrentPage(currentPage + 1)
                        }
                      }}
                      className={currentPage === totalPages ? 'pointer-events-none opacity-50' : ''}
                    />
                  </PaginationItem>
                </PaginationContent>
              </Pagination>
            </div>
          )}
        </div>
      </main>
      <Dialog open={!!profileUser} onOpenChange={(isOpen) => !isOpen && setProfileUser(null)}>
        <DialogContent className="sm:max-w-md">
            <DialogHeader className="text-left">
                <DialogTitle>View Profile</DialogTitle>
                <DialogDescription>
                    Choose where to view {profileUser?.name}'s profile:
                </DialogDescription>
            </DialogHeader>
            {profileUser && (
                <div className="flex items-center gap-3 py-4">
                    <Image
                        src={profileUser.avatar}
                        alt={profileUser.name}
                        width={48}
                        height={48}
                        className="rounded-full"
                        unoptimized
                    />
                    <div>
                        <p className="font-medium">{profileUser.name}</p>
                        <p className="text-sm text-muted-foreground font-mono">{profileUser.uid}</p>
                    </div>
                </div>
            )}
            <DialogFooter className="flex-col sm:flex-row sm:justify-between gap-2">
                <div className="flex flex-col sm:flex-row gap-2">
                    <Button
                        variant="outline"
                        onClick={() => profileUser && handleSteamProfile(profileUser.uid)}
                    >
                        <ExternalLink className="mr-2 h-4 w-4" />
                        Open in Steam
                    </Button>
                    <Button
                        onClick={() => profileUser && handleGrustProfile(profileUser.uid)}
                    >
                        <ExternalLink className="mr-2 h-4 w-4" />
                        Open in gRust
                    </Button>
                </div>
                <DialogClose asChild>
                    <Button type="button" variant="secondary" className="hidden sm:flex">
                        Close
                    </Button>
                </DialogClose>
            </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}
</file>

<file path="auth.ts">
export { authOptions } from './lib/auth-wrapper'
</file>

<file path="components/icons.tsx">
import { SVGProps } from 'react';
import { Eye, EyeOff, Loader2 } from 'lucide-react';
interface IconProps extends SVGProps<SVGSVGElement> {
  className?: string;
}
export const Icons = {
  steam: ({ className, ...props }: IconProps) => (
    <svg
      className={className}
      viewBox="0 0 128 128"
      fill="currentColor"
      {...props}
    >
      <path d="M 97 21 C 81.588592 21 69.019191 33.557786 69 48.964844 L 51.539062 71.25 A 3.0003 3.0003 0 0 0 54.171875 76.087891 L 55.066406 76.005859 C 63.298932 76.04273 70 82.759066 70 91 A 3.0003 3.0003 0 0 0 70.019531 91.365234 A 3.0003 3.0003 0 0 0 69.904297 92.039062 C 69.48945 99.75523 63.0375 106 55 106 C 50.292857 106 46.157908 103.91767 43.414062 100.5918 A 3.0003 3.0003 0 1 0 38.785156 104.4082 C 42.641311 109.08233 48.507143 112 55 112 C 65.644057 112 74.366953 104.01209 75.669922 93.835938 C 82.206923 88.71592 90.27046 82.357561 97.044922 76.996094 C 112.44708 76.971081 125 64.40783 125 49 C 125 33.576812 112.42319 21 97 21 z M 97 27 C 109.17681 27 119 36.823188 119 49 C 119 61.176812 109.17681 71 97 71 L 96 71 A 3.0003 3.0003 0 0 0 94.138672 71.648438 C 88.311262 76.261803 81.558496 81.575188 75.443359 86.376953 C 73.659534 78.562147 67.493083 72.38705 59.6875 70.578125 L 74.361328 51.849609 A 3.0003 3.0003 0 0 0 75 50 L 75 49 C 75 36.823188 84.823188 27 97 27 z M 97 32 C 87.646689 32 80 39.646696 80 49 C 80 58.353304 87.646689 66 97 66 C 106.35331 66 114 58.353304 114 49 C 114 39.646696 106.35331 32 97 32 z M 97 38 C 103.11067 38 108 42.889331 108 49 C 108 55.110669 103.11067 60 97 60 C 90.889328 60 86 55.110669 86 49 C 86 42.889331 90.889328 38 97 38 z M 11.210938 62.708984 C 7.7044025 62.679432 4.323664 64.70125 2.8476562 68.107422 C 0.88708492 72.631817 2.9662504 77.985115 7.5078125 79.953125 L 51.392578 99.246094 A 3.0003 3.0003 0 0 0 51.546875 99.308594 C 52.552098 99.685552 53.7 100 55 100 C 58.421935 100 61.797025 97.9478 63.255859 94.476562 C 65.203759 89.958516 63.131514 84.621408 58.601562 82.652344 L 14.701172 63.451172 A 3.0003 3.0003 0 0 0 14.693359 63.447266 C 13.562247 62.957117 12.379782 62.718835 11.210938 62.708984 z M 11.15625 68.71875 C 11.54662 68.718513 11.937739 68.793267 12.306641 68.953125 L 56.197266 88.148438 A 3.0003 3.0003 0 0 0 56.207031 88.152344 C 57.665469 88.784333 58.387475 90.631817 57.748047 92.107422 A 3.0003 3.0003 0 0 0 57.730469 92.146484 C 57.183326 93.459554 56.169565 94 55 94 C 54.704835 94 54.256438 93.912378 53.675781 93.697266 L 9.9082031 74.453125 A 3.0003 3.0003 0 0 0 9.8925781 74.447266 C 8.4341402 73.815317 7.714087 71.967792 8.3535156 70.492188 C 8.6695105 69.762968 9.2884934 69.21821 10.013672 68.935547 C 10.376261 68.794215 10.76588 68.718987 11.15625 68.71875 z"/>
    </svg>
  ),
  spinner: Loader2,
  eye: Eye,
  eyeOff: EyeOff,
};
</file>

<file path="components/summary.tsx">
"use client"
import { useEffect, useState, useRef } from 'react'
import { Card, CardContent } from '@/components/ui/card'
import { Users, Shield, UsersRound } from 'lucide-react'
import { useChart } from './charts/chart-provider'
export function Summary() {
  const { stats, loading, error, fetchStats, days } = useChart()
  const scrollRef = useRef<HTMLDivElement>(null)
  const [isPaused, setIsPaused] = useState(false)
  const summaryItems = [
    {
      icon: Users,
      label: 'NEW PLAYERS (LAST 7 DAYS)',
      value: stats?.new_players || 0,
    },
    {
      icon: UsersRound,
      label: 'TOTAL PLAYERS',
      value: stats?.total_players || 0,
    },
    {
      icon: Shield,
      label: 'TOTAL BANS',
      value: stats?.total_bans || 0,
    }
  ]
  useEffect(() => {
    if (!scrollRef.current || loading || error || !stats) return
    const container = scrollRef.current
    container.style.animation = 'none'
    container.offsetHeight
    container.style.animation = 'infinite-scroll 20s linear infinite'
  }, [loading, error, stats])
  useEffect(() => {
    if (scrollRef.current) {
      scrollRef.current.style.animationPlayState = isPaused ? 'paused' : 'running'
    }
  }, [isPaused])
  if (loading) {
    return (
      <Card className="p-6">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-semibold">Summary</h3>
        </div>
        <div className="flex gap-4 overflow-hidden">
          {[...Array(3)].map((_, index) => (
            <div key={index} className="min-w-[320px] h-24 bg-muted animate-pulse rounded-lg" />
          ))}
        </div>
      </Card>
    )
  }
  if (error || !stats) {
    return (
      <Card className="p-6">
        <div className="text-center text-muted-foreground">
          {error || 'No data available'}
        </div>
      </Card>
    )
  }
  const infiniteItems = Array(8).fill(summaryItems).flat()
  return (
    <Card className="p-6">
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-lg font-semibold">Summary</h3>
      </div>
      <div
        className="relative overflow-hidden"
        onMouseEnter={() => setIsPaused(true)}
        onMouseLeave={() => setIsPaused(false)}
      >
        {}
        <div className="absolute left-0 top-0 bottom-0 w-16 bg-gradient-to-r from-card via-card/80 to-transparent z-10 pointer-events-none" />
        <div className="absolute right-0 top-0 bottom-0 w-16 bg-gradient-to-l from-card via-card/80 to-transparent z-10 pointer-events-none" />
        <div
          ref={scrollRef}
          className="flex gap-4"
          style={{
            width: 'fit-content',
          }}
        >
          {infiniteItems.map((item, index) => {
            const Icon = item.icon
            return (
              <div
                key={index}
                className="min-w-[320px] flex-shrink-0 p-4 rounded-lg border bg-muted/20 border-muted-foreground/20 transition-all duration-200 hover:shadow-md hover:bg-muted/30 hover:border-muted-foreground/40"
              >
                <div className="flex items-center gap-3">
                  <div className="p-2 rounded-full bg-muted-foreground/10 transition-colors duration-200">
                    <Icon className="h-5 w-5 text-muted-foreground transition-transform duration-200 hover:scale-110" />
                  </div>
                  <div className="flex-1 min-w-0">
                    <p className="text-xs font-medium text-muted-foreground uppercase tracking-wide mb-1 transition-colors duration-200">
                      {item.label}
                    </p>
                    <p className="text-2xl font-bold text-foreground transition-colors duration-200">
                      {item.value.toLocaleString()}
                    </p>
                  </div>
                </div>
              </div>
            )
          })}
        </div>
      </div>
    </Card>
  )
}
</file>

<file path="middleware.ts">
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'
export function middleware(request: NextRequest) {
  const requestHeaders = new Headers(request.headers);
  requestHeaders.set('x-current-path', request.nextUrl.pathname);
  return NextResponse.next({
    request: {
      headers: requestHeaders,
    },
  });
}
export const config = {
  matcher: ["/((?!api|_next/static|_next/image|favicon.ico).*)"],
}
</file>

<file path="README.md">
## Setup Instructions

1. Create a Steam API key at https://steamcommunity.com/dev/apikey
2. `.env` configuration:
   ```
   NEXTAUTH_URL=http://localhost:3000
   NEXTAUTH_SECRET=your_nextauth_secret_here
   STEAM_SECRET=your_steam_secret_here
   ```
3. Run the development server:
   ```bash
   pnpm run dev
   ```
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
-p
.gemini
QWEN.md
GEMINI.md
*.code-workspace
example
error
</file>

<file path="app/login/page.tsx">
"use client"
import { useState, useEffect } from 'react'
import { useSession, signIn } from 'next-auth/react'
import { useRouter } from 'next/navigation'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Icons } from '@/components/icons'
import { LogoSpinner } from '@/components/logo-spinner'
import { ThemeToggle } from '@/components/theme/theme-toggle'
export default function LoginPage() {
  const { data: session, status } = useSession()
  const [isLoading, setIsLoading] = useState(false)
  const router = useRouter()
  const handleSteamLogin = async () => {
    setIsLoading(true)
    try {
      await signIn('steam', { callbackUrl: '/' })
    } catch (error) {
      setIsLoading(false)
    }
  }
  useEffect(() => {
    if (status === 'authenticated') {
      router.push('/')
    }
  }, [status, router])
  if (status === 'loading') {
    return (
      <div className="flex min-h-screen items-center justify-center">
        <div className="flex items-center gap-2">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
          <span className="text-lg">Loading...</span>
        </div>
      </div>
    )
  }
  return (
    <div className="min-h-screen bg-background flex items-center justify-center p-4 relative">
      {}
      <div className="absolute top-4 right-4">
        <ThemeToggle />
      </div>
      {}
      <Card className="w-full max-w-md shadow-2xl bg-card/95 backdrop-blur">
        <CardHeader className="text-center space-y-6">
          {}
          <div className="flex justify-center">
            <LogoSpinner />
          </div>
          {}
          <CardTitle className="text-3xl font-bold tracking-tight">
            Welcome to <span className="text-primary">gRust Panel</span>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {}
          <Button
            className="w-full h-12 text-base bg-[#1b2838] hover:bg-[#2a475e] text-white border-0"
            onClick={handleSteamLogin}
            disabled={isLoading}
            size="lg"
          >
            {isLoading ? (
              <>
                <Icons.spinner className="mr-2 h-5 w-5 animate-spin" />
                Signing in...
              </>
            ) : (
              <>
                <Icons.steam className="mr-2 h-5 w-5" />
                Login with Steam
              </>
            )}
          </Button>
          {}
          <div className="text-center space-y-2">
            <p className="text-xs text-muted-foreground">
              We use Steam OpenID for secure authentication.<br />
              So your Steam credentials are not stored anywhere.
            </p>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
</file>

<file path="package.json">
{
  "name": "gRust-Panel-2.0",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build --turbopack",
    "start": "next start"
  },
  "overrides": {
    "react-is": "^19.0.0-rc-69d4b800-20241021"
  },
  "dependencies": {
    "@radix-ui/react-alert-dialog": "^1.1.15",
    "@radix-ui/react-context-menu": "^2.2.16",
    "@radix-ui/react-dialog": "^1.1.15",
    "@radix-ui/react-dropdown-menu": "^2.1.16",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-select": "^2.2.6",
    "@radix-ui/react-separator": "^1.1.7",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-tooltip": "^1.2.8",
    "@tanstack/react-table": "^8.21.3",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "lucide-react": "^0.541.0",
    "next": "15.5.2",
    "next-auth": "^4.24.11",
    "next-auth-steam": "0.4.0",
    "next-themes": "^0.4.6",
    "react": "19.1.0",
    "react-dom": "19.1.0",
    "recharts": "2.15.4",
    "sonner": "^2.0.7",
    "tailwind-merge": "^3.3.1",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "tailwindcss": "^4",
    "tw-animate-css": "^1.3.7",
    "typescript": "^5"
  }
}
</file>

<file path="app/layout.tsx">
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { ThemeProvider } from "@/components/theme/theme-provider";
import SessionProviderWrapper from "@/components/session-provider";
import { getServerSession } from 'next-auth';
import { authOptions } from "@/auth";
import { Toaster } from "@/components/ui/sonner";
import { ChartProvider } from "@/components/charts/chart-provider";
import { Header } from "@/components/header/header";
import { UserProvider } from '@/contexts/user-context'
import { JwtStatusProvider } from "@/components/jwt-status-provider";
import { JwtGuard } from "@/components/jwt-guard";
import { headers } from "next/headers";
const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});
const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});
export const metadata: Metadata = {
  title: { default: "gRust Panel", template: "%s | Panel"},
  description: "An admin panel for gRust",
  authors: [{ name: "TuPiDAn", url: "https://tupidan.ru" }],
};
export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const session = await getServerSession(authOptions());
  const pathname = (await headers()).get("x-current-path") ?? "";
  return (
    <html lang="en" suppressHydrationWarning>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <SessionProviderWrapper session={session}>
          <UserProvider>
            <JwtStatusProvider>
              <ChartProvider>
                <ThemeProvider
                  attribute="class"
                  defaultTheme="system"
                  enableSystem
                  disableTransitionOnChange
                >
                  {pathname.startsWith("/login") ? null : <Header />}
                  <JwtGuard>
                    {children}
                  </JwtGuard>
                  <Toaster />
                </ThemeProvider>
              </ChartProvider>
            </JwtStatusProvider>
          </UserProvider>
        </SessionProviderWrapper>
      </body>
    </html>
  );
}
</file>

<file path="app/page.tsx">
import { getServerSession } from 'next-auth';
import { authOptions } from "@/auth";
import { redirect } from "next/navigation";
import { StatsChart } from "@/components/charts/stats-chart-bars";
import { BestDaysCard } from "@/components/charts/best-days";
import { Summary } from "@/components/summary";
import type { Metadata } from "next";
export const metadata: Metadata = {
  title: "Dashboard | Panel",
};
export default async function Home() {
  const session = await getServerSession(authOptions());
  if (!session) {
    redirect("/login");
  }
  return (
    <>
      <div className="min-h-screen bg-background">
        <main className="container mx-auto py-4 max-w-7xl">
          <div className="space-y-4 md:space-y-6 px-4">
            <div className="flex flex-col xl:flex-row gap-4 md:gap-6">
              <div className="flex-1 min-w-0">
                <StatsChart />
              </div>
              <div className="w-full xl:w-96 xl:flex-shrink-0">
                <BestDaysCard />
              </div>
            </div>
            <Summary />
          </div>
        </main>
      </div>
    </>
  );
}
</file>

</files>
